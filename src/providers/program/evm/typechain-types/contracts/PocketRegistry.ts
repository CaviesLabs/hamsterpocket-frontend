/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Types {
  export type ValueComparisonStruct = {
    value0: BigNumberish;
    value1: BigNumberish;
    operator: BigNumberish;
  };

  export type ValueComparisonStructOutput = [
    value0: bigint,
    value1: bigint,
    operator: bigint
  ] & { value0: bigint; value1: bigint; operator: bigint };

  export type StopConditionStruct = {
    value: BigNumberish;
    operator: BigNumberish;
  };

  export type StopConditionStructOutput = [value: bigint, operator: bigint] & {
    value: bigint;
    operator: bigint;
  };

  export type TradingStopConditionStruct = {
    stopType: BigNumberish;
    value: BigNumberish;
  };

  export type TradingStopConditionStructOutput = [
    stopType: bigint,
    value: bigint
  ] & { stopType: bigint; value: bigint };

  export type PocketStruct = {
    id: string;
    totalDepositedBaseAmount: BigNumberish;
    totalSwappedBaseAmount: BigNumberish;
    totalReceivedTargetAmount: BigNumberish;
    totalClosedPositionInTargetTokenAmount: BigNumberish;
    totalReceivedFundInBaseTokenAmount: BigNumberish;
    baseTokenBalance: BigNumberish;
    targetTokenBalance: BigNumberish;
    executedBatchAmount: BigNumberish;
    nextScheduledExecutionAt: BigNumberish;
    status: BigNumberish;
    owner: AddressLike;
    ammRouterAddress: AddressLike;
    baseTokenAddress: AddressLike;
    targetTokenAddress: AddressLike;
    startAt: BigNumberish;
    batchVolume: BigNumberish;
    frequency: BigNumberish;
    openingPositionCondition: Types.ValueComparisonStruct;
    stopConditions: Types.StopConditionStruct[];
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
    ammRouterVersion: BigNumberish;
  };

  export type PocketStructOutput = [
    id: string,
    totalDepositedBaseAmount: bigint,
    totalSwappedBaseAmount: bigint,
    totalReceivedTargetAmount: bigint,
    totalClosedPositionInTargetTokenAmount: bigint,
    totalReceivedFundInBaseTokenAmount: bigint,
    baseTokenBalance: bigint,
    targetTokenBalance: bigint,
    executedBatchAmount: bigint,
    nextScheduledExecutionAt: bigint,
    status: bigint,
    owner: string,
    ammRouterAddress: string,
    baseTokenAddress: string,
    targetTokenAddress: string,
    startAt: bigint,
    batchVolume: bigint,
    frequency: bigint,
    openingPositionCondition: Types.ValueComparisonStructOutput,
    stopConditions: Types.StopConditionStructOutput[],
    takeProfitCondition: Types.TradingStopConditionStructOutput,
    stopLossCondition: Types.TradingStopConditionStructOutput,
    ammRouterVersion: bigint
  ] & {
    id: string;
    totalDepositedBaseAmount: bigint;
    totalSwappedBaseAmount: bigint;
    totalReceivedTargetAmount: bigint;
    totalClosedPositionInTargetTokenAmount: bigint;
    totalReceivedFundInBaseTokenAmount: bigint;
    baseTokenBalance: bigint;
    targetTokenBalance: bigint;
    executedBatchAmount: bigint;
    nextScheduledExecutionAt: bigint;
    status: bigint;
    owner: string;
    ammRouterAddress: string;
    baseTokenAddress: string;
    targetTokenAddress: string;
    startAt: bigint;
    batchVolume: bigint;
    frequency: bigint;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    stopConditions: Types.StopConditionStructOutput[];
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
    ammRouterVersion: bigint;
  };
}

export declare namespace Params {
  export type CreatePocketParamsStruct = {
    id: string;
    owner: AddressLike;
    ammRouterAddress: AddressLike;
    baseTokenAddress: AddressLike;
    targetTokenAddress: AddressLike;
    ammRouterVersion: BigNumberish;
    startAt: BigNumberish;
    batchVolume: BigNumberish;
    stopConditions: Types.StopConditionStruct[];
    frequency: BigNumberish;
    openingPositionCondition: Types.ValueComparisonStruct;
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
  };

  export type CreatePocketParamsStructOutput = [
    id: string,
    owner: string,
    ammRouterAddress: string,
    baseTokenAddress: string,
    targetTokenAddress: string,
    ammRouterVersion: bigint,
    startAt: bigint,
    batchVolume: bigint,
    stopConditions: Types.StopConditionStructOutput[],
    frequency: bigint,
    openingPositionCondition: Types.ValueComparisonStructOutput,
    takeProfitCondition: Types.TradingStopConditionStructOutput,
    stopLossCondition: Types.TradingStopConditionStructOutput
  ] & {
    id: string;
    owner: string;
    ammRouterAddress: string;
    baseTokenAddress: string;
    targetTokenAddress: string;
    ammRouterVersion: bigint;
    startAt: bigint;
    batchVolume: bigint;
    stopConditions: Types.StopConditionStructOutput[];
    frequency: bigint;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
  };

  export type UpdatePocketParamsStruct = {
    id: string;
    startAt: BigNumberish;
    batchVolume: BigNumberish;
    stopConditions: Types.StopConditionStruct[];
    frequency: BigNumberish;
    openingPositionCondition: Types.ValueComparisonStruct;
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
  };

  export type UpdatePocketParamsStructOutput = [
    id: string,
    startAt: bigint,
    batchVolume: bigint,
    stopConditions: Types.StopConditionStructOutput[],
    frequency: bigint,
    openingPositionCondition: Types.ValueComparisonStructOutput,
    takeProfitCondition: Types.TradingStopConditionStructOutput,
    stopLossCondition: Types.TradingStopConditionStructOutput
  ] & {
    id: string;
    startAt: bigint;
    batchVolume: bigint;
    stopConditions: Types.StopConditionStructOutput[];
    frequency: bigint;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
  };

  export type UpdatePocketClosingPositionStatsParamsStruct = {
    id: string;
    actor: AddressLike;
    swappedTargetTokenAmount: BigNumberish;
    receivedBaseTokenAmount: BigNumberish;
  };

  export type UpdatePocketClosingPositionStatsParamsStructOutput = [
    id: string,
    actor: string,
    swappedTargetTokenAmount: bigint,
    receivedBaseTokenAmount: bigint
  ] & {
    id: string;
    actor: string;
    swappedTargetTokenAmount: bigint;
    receivedBaseTokenAmount: bigint;
  };

  export type UpdatePocketDepositParamsStruct = {
    actor: AddressLike;
    id: string;
    amount: BigNumberish;
    tokenAddress: AddressLike;
  };

  export type UpdatePocketDepositParamsStructOutput = [
    actor: string,
    id: string,
    amount: bigint,
    tokenAddress: string
  ] & { actor: string; id: string; amount: bigint; tokenAddress: string };

  export type UpdatePocketStatusParamsStruct = {
    actor: AddressLike;
    id: string;
    status: BigNumberish;
  };

  export type UpdatePocketStatusParamsStructOutput = [
    actor: string,
    id: string,
    status: bigint
  ] & { actor: string; id: string; status: bigint };

  export type UpdatePocketTradingStatsParamsStruct = {
    actor: AddressLike;
    id: string;
    swappedBaseTokenAmount: BigNumberish;
    receivedTargetTokenAmount: BigNumberish;
  };

  export type UpdatePocketTradingStatsParamsStructOutput = [
    actor: string,
    id: string,
    swappedBaseTokenAmount: bigint,
    receivedTargetTokenAmount: bigint
  ] & {
    actor: string;
    id: string;
    swappedBaseTokenAmount: bigint;
    receivedTargetTokenAmount: bigint;
  };

  export type UpdatePocketWithdrawalParamsStruct = {
    actor: AddressLike;
    id: string;
  };

  export type UpdatePocketWithdrawalParamsStructOutput = [
    actor: string,
    id: string
  ] & { actor: string; id: string };
}

export interface PocketRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR"
      | "PERCENTAGE_PRECISION"
      | "RELAYER"
      | "allowedInteractiveAddresses"
      | "blacklistedIdMap"
      | "getBalanceInfoOf"
      | "getOwnerOf"
      | "getRoleAdmin"
      | "getStopConditionsOf"
      | "getTradingInfoOf"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeUserPocket"
      | "isAbleToClose"
      | "isAbleToDeposit"
      | "isAbleToPause"
      | "isAbleToRestart"
      | "isAbleToUpdate"
      | "isAbleToWithdraw"
      | "isOwnerOf"
      | "isReadyToClosePosition"
      | "isReadyToSwap"
      | "owner"
      | "pause"
      | "paused"
      | "pockets"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "shouldClosePocket"
      | "shouldOpenPosition"
      | "shouldStopLoss"
      | "shouldTakeProfit"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "updatePocket"
      | "updatePocketClosingPositionStats"
      | "updatePocketDepositStats"
      | "updatePocketStatus"
      | "updatePocketTradingStats"
      | "updatePocketWithdrawalStats"
      | "whitelistAddress"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AddressWhitelisted"
      | "Initialized"
      | "OwnershipTransferred"
      | "Paused"
      | "PocketInitialized"
      | "PocketUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OPERATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RELAYER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedInteractiveAddresses",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedIdMap",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getOwnerOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStopConditionsOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingInfoOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUserPocket",
    values: [Params.CreatePocketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToClose",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToDeposit",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToPause",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToRestart",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToUpdate",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToWithdraw",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOf",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToClosePosition",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToSwap",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pockets", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldClosePocket",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldOpenPosition",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldStopLoss",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldTakeProfit",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePocket",
    values: [Params.UpdatePocketParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketClosingPositionStats",
    values: [Params.UpdatePocketClosingPositionStatsParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketDepositStats",
    values: [Params.UpdatePocketDepositParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketStatus",
    values: [Params.UpdatePocketStatusParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketTradingStats",
    values: [Params.UpdatePocketTradingStatsParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketWithdrawalStats",
    values: [Params.UpdatePocketWithdrawalParamsStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddress",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OPERATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RELAYER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedInteractiveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedIdMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStopConditionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeUserPocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToRestart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pockets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldClosePocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldStopLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldTakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketClosingPositionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketDepositStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketTradingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketWithdrawalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddress",
    data: BytesLike
  ): Result;
}

export namespace AddressWhitelistedEvent {
  export type InputTuple = [
    actor: AddressLike,
    mintAddress: AddressLike,
    value: boolean
  ];
  export type OutputTuple = [
    actor: string,
    mintAddress: string,
    value: boolean
  ];
  export interface OutputObject {
    actor: string;
    mintAddress: string;
    value: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PocketInitializedEvent {
  export type InputTuple = [
    actor: AddressLike,
    pocketId: string,
    owner: AddressLike,
    pocketData: Types.PocketStruct,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    actor: string,
    pocketId: string,
    owner: string,
    pocketData: Types.PocketStructOutput,
    timestamp: bigint
  ];
  export interface OutputObject {
    actor: string;
    pocketId: string;
    owner: string;
    pocketData: Types.PocketStructOutput;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PocketUpdatedEvent {
  export type InputTuple = [
    actor: AddressLike,
    pocketId: string,
    owner: AddressLike,
    reason: string,
    pocketData: Types.PocketStruct,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    actor: string,
    pocketId: string,
    owner: string,
    reason: string,
    pocketData: Types.PocketStructOutput,
    timestamp: bigint
  ];
  export interface OutputObject {
    actor: string;
    pocketId: string;
    owner: string;
    reason: string;
    pocketData: Types.PocketStructOutput;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface PocketRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): PocketRegistry;
  waitForDeployment(): Promise<this>;

  interface: PocketRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  OPERATOR: TypedContractMethod<[], [string], "view">;

  PERCENTAGE_PRECISION: TypedContractMethod<[], [bigint], "view">;

  RELAYER: TypedContractMethod<[], [string], "view">;

  allowedInteractiveAddresses: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  blacklistedIdMap: TypedContractMethod<[arg0: string], [boolean], "view">;

  getBalanceInfoOf: TypedContractMethod<
    [pocketId: string],
    [[bigint, bigint]],
    "view"
  >;

  getOwnerOf: TypedContractMethod<[pocketId: string], [string], "view">;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getStopConditionsOf: TypedContractMethod<
    [pocketId: string],
    [Types.StopConditionStructOutput[]],
    "view"
  >;

  getTradingInfoOf: TypedContractMethod<
    [pocketId: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput
      ]
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  initializeUserPocket: TypedContractMethod<
    [params: Params.CreatePocketParamsStruct],
    [void],
    "nonpayable"
  >;

  isAbleToClose: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isAbleToDeposit: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isAbleToPause: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isAbleToRestart: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isAbleToUpdate: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isAbleToWithdraw: TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;

  isOwnerOf: TypedContractMethod<
    [pocketId: string, target: AddressLike],
    [boolean],
    "view"
  >;

  isReadyToClosePosition: TypedContractMethod<
    [pocketId: string],
    [boolean],
    "view"
  >;

  isReadyToSwap: TypedContractMethod<[pocketId: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  pockets: TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput,
        bigint
      ] & {
        id: string;
        totalDepositedBaseAmount: bigint;
        totalSwappedBaseAmount: bigint;
        totalReceivedTargetAmount: bigint;
        totalClosedPositionInTargetTokenAmount: bigint;
        totalReceivedFundInBaseTokenAmount: bigint;
        baseTokenBalance: bigint;
        targetTokenBalance: bigint;
        executedBatchAmount: bigint;
        nextScheduledExecutionAt: bigint;
        status: bigint;
        owner: string;
        ammRouterAddress: string;
        baseTokenAddress: string;
        targetTokenAddress: string;
        startAt: bigint;
        batchVolume: bigint;
        frequency: bigint;
        openingPositionCondition: Types.ValueComparisonStructOutput;
        takeProfitCondition: Types.TradingStopConditionStructOutput;
        stopLossCondition: Types.TradingStopConditionStructOutput;
        ammRouterVersion: bigint;
      }
    ],
    "view"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  shouldClosePocket: TypedContractMethod<[pocketId: string], [boolean], "view">;

  shouldOpenPosition: TypedContractMethod<
    [
      pocketId: string,
      swappedBaseTokenAmount: BigNumberish,
      receivedTargetTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;

  shouldStopLoss: TypedContractMethod<
    [
      pocketId: string,
      swappedTargetTokenAmount: BigNumberish,
      receivedBaseTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;

  shouldTakeProfit: TypedContractMethod<
    [
      pocketId: string,
      swappedTargetTokenAmount: BigNumberish,
      receivedBaseTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updatePocket: TypedContractMethod<
    [params: Params.UpdatePocketParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;

  updatePocketClosingPositionStats: TypedContractMethod<
    [
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  updatePocketDepositStats: TypedContractMethod<
    [params: Params.UpdatePocketDepositParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;

  updatePocketStatus: TypedContractMethod<
    [params: Params.UpdatePocketStatusParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;

  updatePocketTradingStats: TypedContractMethod<
    [params: Params.UpdatePocketTradingStatsParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;

  updatePocketWithdrawalStats: TypedContractMethod<
    [params: Params.UpdatePocketWithdrawalParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;

  whitelistAddress: TypedContractMethod<
    [interactiveAddress: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "PERCENTAGE_PRECISION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "RELAYER"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowedInteractiveAddresses"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "blacklistedIdMap"
  ): TypedContractMethod<[arg0: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "getBalanceInfoOf"
  ): TypedContractMethod<[pocketId: string], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getOwnerOf"
  ): TypedContractMethod<[pocketId: string], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getStopConditionsOf"
  ): TypedContractMethod<
    [pocketId: string],
    [Types.StopConditionStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTradingInfoOf"
  ): TypedContractMethod<
    [pocketId: string],
    [
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput
      ]
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initializeUserPocket"
  ): TypedContractMethod<
    [params: Params.CreatePocketParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAbleToClose"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAbleToDeposit"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAbleToPause"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAbleToRestart"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAbleToUpdate"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAbleToWithdraw"
  ): TypedContractMethod<
    [pocketId: string, owner: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOwnerOf"
  ): TypedContractMethod<
    [pocketId: string, target: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isReadyToClosePosition"
  ): TypedContractMethod<[pocketId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReadyToSwap"
  ): TypedContractMethod<[pocketId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "pockets"
  ): TypedContractMethod<
    [arg0: string],
    [
      [
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput,
        bigint
      ] & {
        id: string;
        totalDepositedBaseAmount: bigint;
        totalSwappedBaseAmount: bigint;
        totalReceivedTargetAmount: bigint;
        totalClosedPositionInTargetTokenAmount: bigint;
        totalReceivedFundInBaseTokenAmount: bigint;
        baseTokenBalance: bigint;
        targetTokenBalance: bigint;
        executedBatchAmount: bigint;
        nextScheduledExecutionAt: bigint;
        status: bigint;
        owner: string;
        ammRouterAddress: string;
        baseTokenAddress: string;
        targetTokenAddress: string;
        startAt: bigint;
        batchVolume: bigint;
        frequency: bigint;
        openingPositionCondition: Types.ValueComparisonStructOutput;
        takeProfitCondition: Types.TradingStopConditionStructOutput;
        stopLossCondition: Types.TradingStopConditionStructOutput;
        ammRouterVersion: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "shouldClosePocket"
  ): TypedContractMethod<[pocketId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "shouldOpenPosition"
  ): TypedContractMethod<
    [
      pocketId: string,
      swappedBaseTokenAmount: BigNumberish,
      receivedTargetTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "shouldStopLoss"
  ): TypedContractMethod<
    [
      pocketId: string,
      swappedTargetTokenAmount: BigNumberish,
      receivedBaseTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "shouldTakeProfit"
  ): TypedContractMethod<
    [
      pocketId: string,
      swappedTargetTokenAmount: BigNumberish,
      receivedBaseTokenAmount: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updatePocket"
  ): TypedContractMethod<
    [params: Params.UpdatePocketParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePocketClosingPositionStats"
  ): TypedContractMethod<
    [
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePocketDepositStats"
  ): TypedContractMethod<
    [params: Params.UpdatePocketDepositParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePocketStatus"
  ): TypedContractMethod<
    [params: Params.UpdatePocketStatusParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePocketTradingStats"
  ): TypedContractMethod<
    [params: Params.UpdatePocketTradingStatsParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updatePocketWithdrawalStats"
  ): TypedContractMethod<
    [params: Params.UpdatePocketWithdrawalParamsStruct, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistAddress"
  ): TypedContractMethod<
    [interactiveAddress: AddressLike, value: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AddressWhitelisted"
  ): TypedContractEvent<
    AddressWhitelistedEvent.InputTuple,
    AddressWhitelistedEvent.OutputTuple,
    AddressWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "PocketInitialized"
  ): TypedContractEvent<
    PocketInitializedEvent.InputTuple,
    PocketInitializedEvent.OutputTuple,
    PocketInitializedEvent.OutputObject
  >;
  getEvent(
    key: "PocketUpdated"
  ): TypedContractEvent<
    PocketUpdatedEvent.InputTuple,
    PocketUpdatedEvent.OutputTuple,
    PocketUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AddressWhitelisted(address,address,bool)": TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;
    AddressWhitelisted: TypedContractEvent<
      AddressWhitelistedEvent.InputTuple,
      AddressWhitelistedEvent.OutputTuple,
      AddressWhitelistedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "PocketInitialized(address,string,address,tuple,uint256)": TypedContractEvent<
      PocketInitializedEvent.InputTuple,
      PocketInitializedEvent.OutputTuple,
      PocketInitializedEvent.OutputObject
    >;
    PocketInitialized: TypedContractEvent<
      PocketInitializedEvent.InputTuple,
      PocketInitializedEvent.OutputTuple,
      PocketInitializedEvent.OutputObject
    >;

    "PocketUpdated(address,string,address,string,tuple,uint256)": TypedContractEvent<
      PocketUpdatedEvent.InputTuple,
      PocketUpdatedEvent.OutputTuple,
      PocketUpdatedEvent.OutputObject
    >;
    PocketUpdated: TypedContractEvent<
      PocketUpdatedEvent.InputTuple,
      PocketUpdatedEvent.OutputTuple,
      PocketUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
