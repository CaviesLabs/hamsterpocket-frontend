/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Types {
  export type ValueComparisonStruct = {
    value0: PromiseOrValue<BigNumberish>;
    value1: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
  };

  export type ValueComparisonStructOutput = [BigNumber, BigNumber, number] & {
    value0: BigNumber;
    value1: BigNumber;
    operator: number;
  };

  export type StopConditionStruct = {
    value: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
  };

  export type StopConditionStructOutput = [BigNumber, number] & {
    value: BigNumber;
    operator: number;
  };

  export type TradingStopConditionStruct = {
    stopType: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
  };

  export type TradingStopConditionStructOutput = [number, BigNumber] & {
    stopType: number;
    value: BigNumber;
  };

  export type PocketStruct = {
    id: PromiseOrValue<string>;
    totalDepositedBaseAmount: PromiseOrValue<BigNumberish>;
    totalSwappedBaseAmount: PromiseOrValue<BigNumberish>;
    totalReceivedTargetAmount: PromiseOrValue<BigNumberish>;
    totalClosedPositionInTargetTokenAmount: PromiseOrValue<BigNumberish>;
    totalReceivedFundInBaseTokenAmount: PromiseOrValue<BigNumberish>;
    baseTokenBalance: PromiseOrValue<BigNumberish>;
    targetTokenBalance: PromiseOrValue<BigNumberish>;
    executedBatchAmount: PromiseOrValue<BigNumberish>;
    nextScheduledExecutionAt: PromiseOrValue<BigNumberish>;
    status: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    ammRouterAddress: PromiseOrValue<string>;
    baseTokenAddress: PromiseOrValue<string>;
    targetTokenAddress: PromiseOrValue<string>;
    startAt: PromiseOrValue<BigNumberish>;
    batchVolume: PromiseOrValue<BigNumberish>;
    frequency: PromiseOrValue<BigNumberish>;
    openingPositionCondition: Types.ValueComparisonStruct;
    stopConditions: Types.StopConditionStruct[];
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
    ammRouterVersion: PromiseOrValue<BigNumberish>;
  };

  export type PocketStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    Types.ValueComparisonStructOutput,
    Types.StopConditionStructOutput[],
    Types.TradingStopConditionStructOutput,
    Types.TradingStopConditionStructOutput,
    number
  ] & {
    id: string;
    totalDepositedBaseAmount: BigNumber;
    totalSwappedBaseAmount: BigNumber;
    totalReceivedTargetAmount: BigNumber;
    totalClosedPositionInTargetTokenAmount: BigNumber;
    totalReceivedFundInBaseTokenAmount: BigNumber;
    baseTokenBalance: BigNumber;
    targetTokenBalance: BigNumber;
    executedBatchAmount: BigNumber;
    nextScheduledExecutionAt: BigNumber;
    status: number;
    owner: string;
    ammRouterAddress: string;
    baseTokenAddress: string;
    targetTokenAddress: string;
    startAt: BigNumber;
    batchVolume: BigNumber;
    frequency: BigNumber;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    stopConditions: Types.StopConditionStructOutput[];
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
    ammRouterVersion: number;
  };
}

export declare namespace Params {
  export type CreatePocketParamsStruct = {
    id: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    ammRouterAddress: PromiseOrValue<string>;
    baseTokenAddress: PromiseOrValue<string>;
    targetTokenAddress: PromiseOrValue<string>;
    ammRouterVersion: PromiseOrValue<BigNumberish>;
    startAt: PromiseOrValue<BigNumberish>;
    batchVolume: PromiseOrValue<BigNumberish>;
    stopConditions: Types.StopConditionStruct[];
    frequency: PromiseOrValue<BigNumberish>;
    openingPositionCondition: Types.ValueComparisonStruct;
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
  };

  export type CreatePocketParamsStructOutput = [
    string,
    string,
    string,
    string,
    string,
    number,
    BigNumber,
    BigNumber,
    Types.StopConditionStructOutput[],
    BigNumber,
    Types.ValueComparisonStructOutput,
    Types.TradingStopConditionStructOutput,
    Types.TradingStopConditionStructOutput
  ] & {
    id: string;
    owner: string;
    ammRouterAddress: string;
    baseTokenAddress: string;
    targetTokenAddress: string;
    ammRouterVersion: number;
    startAt: BigNumber;
    batchVolume: BigNumber;
    stopConditions: Types.StopConditionStructOutput[];
    frequency: BigNumber;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
  };

  export type UpdatePocketParamsStruct = {
    id: PromiseOrValue<string>;
    startAt: PromiseOrValue<BigNumberish>;
    batchVolume: PromiseOrValue<BigNumberish>;
    stopConditions: Types.StopConditionStruct[];
    frequency: PromiseOrValue<BigNumberish>;
    openingPositionCondition: Types.ValueComparisonStruct;
    takeProfitCondition: Types.TradingStopConditionStruct;
    stopLossCondition: Types.TradingStopConditionStruct;
  };

  export type UpdatePocketParamsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    Types.StopConditionStructOutput[],
    BigNumber,
    Types.ValueComparisonStructOutput,
    Types.TradingStopConditionStructOutput,
    Types.TradingStopConditionStructOutput
  ] & {
    id: string;
    startAt: BigNumber;
    batchVolume: BigNumber;
    stopConditions: Types.StopConditionStructOutput[];
    frequency: BigNumber;
    openingPositionCondition: Types.ValueComparisonStructOutput;
    takeProfitCondition: Types.TradingStopConditionStructOutput;
    stopLossCondition: Types.TradingStopConditionStructOutput;
  };

  export type UpdatePocketClosingPositionStatsParamsStruct = {
    id: PromiseOrValue<string>;
    actor: PromiseOrValue<string>;
    swappedTargetTokenAmount: PromiseOrValue<BigNumberish>;
    receivedBaseTokenAmount: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePocketClosingPositionStatsParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    id: string;
    actor: string;
    swappedTargetTokenAmount: BigNumber;
    receivedBaseTokenAmount: BigNumber;
  };

  export type UpdatePocketDepositParamsStruct = {
    actor: PromiseOrValue<string>;
    id: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
  };

  export type UpdatePocketDepositParamsStructOutput = [
    string,
    string,
    BigNumber,
    string
  ] & { actor: string; id: string; amount: BigNumber; tokenAddress: string };

  export type UpdatePocketStatusParamsStruct = {
    actor: PromiseOrValue<string>;
    id: PromiseOrValue<string>;
    status: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePocketStatusParamsStructOutput = [
    string,
    string,
    number
  ] & { actor: string; id: string; status: number };

  export type UpdatePocketTradingStatsParamsStruct = {
    actor: PromiseOrValue<string>;
    id: PromiseOrValue<string>;
    swappedBaseTokenAmount: PromiseOrValue<BigNumberish>;
    receivedTargetTokenAmount: PromiseOrValue<BigNumberish>;
  };

  export type UpdatePocketTradingStatsParamsStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    actor: string;
    id: string;
    swappedBaseTokenAmount: BigNumber;
    receivedTargetTokenAmount: BigNumber;
  };

  export type UpdatePocketWithdrawalParamsStruct = {
    actor: PromiseOrValue<string>;
    id: PromiseOrValue<string>;
  };

  export type UpdatePocketWithdrawalParamsStructOutput = [string, string] & {
    actor: string;
    id: string;
  };
}

export interface PocketRegistryInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "OPERATOR()": FunctionFragment;
    "PERCENTAGE_PRECISION()": FunctionFragment;
    "RELAYER()": FunctionFragment;
    "allowedInteractiveAddresses(address)": FunctionFragment;
    "blacklistedIdMap(string)": FunctionFragment;
    "getBalanceInfoOf(string)": FunctionFragment;
    "getOwnerOf(string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getStopConditionsOf(string)": FunctionFragment;
    "getTradingInfoOf(string)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize()": FunctionFragment;
    "initializeUserPocket((string,address,address,address,address,uint8,uint256,uint256,(uint256,uint8)[],uint256,(uint256,uint256,uint8),(uint8,uint256),(uint8,uint256)))": FunctionFragment;
    "isAbleToClose(string,address)": FunctionFragment;
    "isAbleToDeposit(string,address)": FunctionFragment;
    "isAbleToPause(string,address)": FunctionFragment;
    "isAbleToRestart(string,address)": FunctionFragment;
    "isAbleToUpdate(string,address)": FunctionFragment;
    "isAbleToWithdraw(string,address)": FunctionFragment;
    "isOwnerOf(string,address)": FunctionFragment;
    "isReadyToClosePosition(string)": FunctionFragment;
    "isReadyToSwap(string)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pockets(string)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "shouldClosePocket(string)": FunctionFragment;
    "shouldOpenPosition(string,uint256,uint256)": FunctionFragment;
    "shouldStopLoss(string,uint256,uint256)": FunctionFragment;
    "shouldTakeProfit(string,uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePocket((string,uint256,uint256,(uint256,uint8)[],uint256,(uint256,uint256,uint8),(uint8,uint256),(uint8,uint256)),string)": FunctionFragment;
    "updatePocketClosingPositionStats((string,address,uint256,uint256),string)": FunctionFragment;
    "updatePocketDepositStats((address,string,uint256,address),string)": FunctionFragment;
    "updatePocketStatus((address,string,uint8),string)": FunctionFragment;
    "updatePocketTradingStats((address,string,uint256,uint256),string)": FunctionFragment;
    "updatePocketWithdrawalStats((address,string),string)": FunctionFragment;
    "whitelistAddress(address,bool)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "OPERATOR"
      | "PERCENTAGE_PRECISION"
      | "RELAYER"
      | "allowedInteractiveAddresses"
      | "blacklistedIdMap"
      | "getBalanceInfoOf"
      | "getOwnerOf"
      | "getRoleAdmin"
      | "getStopConditionsOf"
      | "getTradingInfoOf"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "initializeUserPocket"
      | "isAbleToClose"
      | "isAbleToDeposit"
      | "isAbleToPause"
      | "isAbleToRestart"
      | "isAbleToUpdate"
      | "isAbleToWithdraw"
      | "isOwnerOf"
      | "isReadyToClosePosition"
      | "isReadyToSwap"
      | "owner"
      | "pause"
      | "paused"
      | "pockets"
      | "renounceOwnership"
      | "renounceRole"
      | "revokeRole"
      | "shouldClosePocket"
      | "shouldOpenPosition"
      | "shouldStopLoss"
      | "shouldTakeProfit"
      | "supportsInterface"
      | "transferOwnership"
      | "unpause"
      | "updatePocket"
      | "updatePocketClosingPositionStats"
      | "updatePocketDepositStats"
      | "updatePocketStatus"
      | "updatePocketTradingStats"
      | "updatePocketWithdrawalStats"
      | "whitelistAddress"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "OPERATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "RELAYER", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowedInteractiveAddresses",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistedIdMap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalanceInfoOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOwnerOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getStopConditionsOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTradingInfoOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initializeUserPocket",
    values: [Params.CreatePocketParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToClose",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToPause",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToRestart",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToUpdate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAbleToWithdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwnerOf",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToClosePosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isReadyToSwap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pockets",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldClosePocket",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldOpenPosition",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldStopLoss",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "shouldTakeProfit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePocket",
    values: [Params.UpdatePocketParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketClosingPositionStats",
    values: [
      Params.UpdatePocketClosingPositionStatsParamsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketDepositStats",
    values: [Params.UpdatePocketDepositParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketStatus",
    values: [Params.UpdatePocketStatusParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketTradingStats",
    values: [
      Params.UpdatePocketTradingStatsParamsStruct,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePocketWithdrawalStats",
    values: [Params.UpdatePocketWithdrawalParamsStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "OPERATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "RELAYER", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allowedInteractiveAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedIdMap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalanceInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStopConditionsOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTradingInfoOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initializeUserPocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToClose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToRestart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToUpdate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAbleToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwnerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToClosePosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReadyToSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pockets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "shouldClosePocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldOpenPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldStopLoss",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shouldTakeProfit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePocket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketClosingPositionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketDepositStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketTradingStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePocketWithdrawalStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAddress",
    data: BytesLike
  ): Result;

  events: {
    "AddressWhitelisted(address,address,bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PocketInitialized(address,string,address,tuple,uint256)": EventFragment;
    "PocketUpdated(address,string,address,string,tuple,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressWhitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PocketInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PocketUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AddressWhitelistedEventObject {
  actor: string;
  mintAddress: string;
  value: boolean;
}
export type AddressWhitelistedEvent = TypedEvent<
  [string, string, boolean],
  AddressWhitelistedEventObject
>;

export type AddressWhitelistedEventFilter =
  TypedEventFilter<AddressWhitelistedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PocketInitializedEventObject {
  actor: string;
  pocketId: string;
  owner: string;
  pocketData: Types.PocketStructOutput;
  timestamp: BigNumber;
}
export type PocketInitializedEvent = TypedEvent<
  [string, string, string, Types.PocketStructOutput, BigNumber],
  PocketInitializedEventObject
>;

export type PocketInitializedEventFilter =
  TypedEventFilter<PocketInitializedEvent>;

export interface PocketUpdatedEventObject {
  actor: string;
  pocketId: string;
  owner: string;
  reason: string;
  pocketData: Types.PocketStructOutput;
  timestamp: BigNumber;
}
export type PocketUpdatedEvent = TypedEvent<
  [string, string, string, string, Types.PocketStructOutput, BigNumber],
  PocketUpdatedEventObject
>;

export type PocketUpdatedEventFilter = TypedEventFilter<PocketUpdatedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PocketRegistry extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PocketRegistryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR(overrides?: CallOverrides): Promise<[string]>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    RELAYER(overrides?: CallOverrides): Promise<[string]>;

    allowedInteractiveAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blacklistedIdMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getBalanceInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getOwnerOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getStopConditionsOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Types.StopConditionStructOutput[]]>;

    getTradingInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput
      ]
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initializeUserPocket(
      params: Params.CreatePocketParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAbleToClose(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAbleToDeposit(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAbleToPause(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAbleToRestart(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAbleToUpdate(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isAbleToWithdraw(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwnerOf(
      pocketId: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReadyToClosePosition(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isReadyToSwap(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pockets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput,
        number
      ] & {
        id: string;
        totalDepositedBaseAmount: BigNumber;
        totalSwappedBaseAmount: BigNumber;
        totalReceivedTargetAmount: BigNumber;
        totalClosedPositionInTargetTokenAmount: BigNumber;
        totalReceivedFundInBaseTokenAmount: BigNumber;
        baseTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        executedBatchAmount: BigNumber;
        nextScheduledExecutionAt: BigNumber;
        status: number;
        owner: string;
        ammRouterAddress: string;
        baseTokenAddress: string;
        targetTokenAddress: string;
        startAt: BigNumber;
        batchVolume: BigNumber;
        frequency: BigNumber;
        openingPositionCondition: Types.ValueComparisonStructOutput;
        takeProfitCondition: Types.TradingStopConditionStructOutput;
        stopLossCondition: Types.TradingStopConditionStructOutput;
        ammRouterVersion: number;
      }
    >;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shouldClosePocket(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shouldOpenPosition(
      pocketId: PromiseOrValue<string>,
      swappedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      receivedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shouldStopLoss(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    shouldTakeProfit(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocket(
      params: Params.UpdatePocketParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocketClosingPositionStats(
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocketDepositStats(
      params: Params.UpdatePocketDepositParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocketStatus(
      params: Params.UpdatePocketStatusParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocketTradingStats(
      params: Params.UpdatePocketTradingStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePocketWithdrawalStats(
      params: Params.UpdatePocketWithdrawalParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    whitelistAddress(
      interactiveAddress: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  OPERATOR(overrides?: CallOverrides): Promise<string>;

  PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  RELAYER(overrides?: CallOverrides): Promise<string>;

  allowedInteractiveAddresses(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blacklistedIdMap(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getBalanceInfoOf(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getOwnerOf(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getStopConditionsOf(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Types.StopConditionStructOutput[]>;

  getTradingInfoOf(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      Types.ValueComparisonStructOutput,
      Types.TradingStopConditionStructOutput,
      Types.TradingStopConditionStructOutput
    ]
  >;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initializeUserPocket(
    params: Params.CreatePocketParamsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAbleToClose(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAbleToDeposit(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAbleToPause(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAbleToRestart(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAbleToUpdate(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isAbleToWithdraw(
    pocketId: PromiseOrValue<string>,
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isOwnerOf(
    pocketId: PromiseOrValue<string>,
    target: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReadyToClosePosition(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isReadyToSwap(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pockets(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      number,
      string,
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      Types.ValueComparisonStructOutput,
      Types.TradingStopConditionStructOutput,
      Types.TradingStopConditionStructOutput,
      number
    ] & {
      id: string;
      totalDepositedBaseAmount: BigNumber;
      totalSwappedBaseAmount: BigNumber;
      totalReceivedTargetAmount: BigNumber;
      totalClosedPositionInTargetTokenAmount: BigNumber;
      totalReceivedFundInBaseTokenAmount: BigNumber;
      baseTokenBalance: BigNumber;
      targetTokenBalance: BigNumber;
      executedBatchAmount: BigNumber;
      nextScheduledExecutionAt: BigNumber;
      status: number;
      owner: string;
      ammRouterAddress: string;
      baseTokenAddress: string;
      targetTokenAddress: string;
      startAt: BigNumber;
      batchVolume: BigNumber;
      frequency: BigNumber;
      openingPositionCondition: Types.ValueComparisonStructOutput;
      takeProfitCondition: Types.TradingStopConditionStructOutput;
      stopLossCondition: Types.TradingStopConditionStructOutput;
      ammRouterVersion: number;
    }
  >;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shouldClosePocket(
    pocketId: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shouldOpenPosition(
    pocketId: PromiseOrValue<string>,
    swappedBaseTokenAmount: PromiseOrValue<BigNumberish>,
    receivedTargetTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shouldStopLoss(
    pocketId: PromiseOrValue<string>,
    swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
    receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  shouldTakeProfit(
    pocketId: PromiseOrValue<string>,
    swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
    receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocket(
    params: Params.UpdatePocketParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocketClosingPositionStats(
    params: Params.UpdatePocketClosingPositionStatsParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocketDepositStats(
    params: Params.UpdatePocketDepositParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocketStatus(
    params: Params.UpdatePocketStatusParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocketTradingStats(
    params: Params.UpdatePocketTradingStatsParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePocketWithdrawalStats(
    params: Params.UpdatePocketWithdrawalParamsStruct,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  whitelistAddress(
    interactiveAddress: PromiseOrValue<string>,
    value: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    OPERATOR(overrides?: CallOverrides): Promise<string>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER(overrides?: CallOverrides): Promise<string>;

    allowedInteractiveAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blacklistedIdMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getBalanceInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getOwnerOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getStopConditionsOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Types.StopConditionStructOutput[]>;

    getTradingInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput
      ]
    >;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    initializeUserPocket(
      params: Params.CreatePocketParamsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    isAbleToClose(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAbleToDeposit(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAbleToPause(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAbleToRestart(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAbleToUpdate(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isAbleToWithdraw(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwnerOf(
      pocketId: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReadyToClosePosition(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isReadyToSwap(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pockets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        Types.ValueComparisonStructOutput,
        Types.TradingStopConditionStructOutput,
        Types.TradingStopConditionStructOutput,
        number
      ] & {
        id: string;
        totalDepositedBaseAmount: BigNumber;
        totalSwappedBaseAmount: BigNumber;
        totalReceivedTargetAmount: BigNumber;
        totalClosedPositionInTargetTokenAmount: BigNumber;
        totalReceivedFundInBaseTokenAmount: BigNumber;
        baseTokenBalance: BigNumber;
        targetTokenBalance: BigNumber;
        executedBatchAmount: BigNumber;
        nextScheduledExecutionAt: BigNumber;
        status: number;
        owner: string;
        ammRouterAddress: string;
        baseTokenAddress: string;
        targetTokenAddress: string;
        startAt: BigNumber;
        batchVolume: BigNumber;
        frequency: BigNumber;
        openingPositionCondition: Types.ValueComparisonStructOutput;
        takeProfitCondition: Types.TradingStopConditionStructOutput;
        stopLossCondition: Types.TradingStopConditionStructOutput;
        ammRouterVersion: number;
      }
    >;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shouldClosePocket(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shouldOpenPosition(
      pocketId: PromiseOrValue<string>,
      swappedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      receivedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shouldStopLoss(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    shouldTakeProfit(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePocket(
      params: Params.UpdatePocketParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePocketClosingPositionStats(
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePocketDepositStats(
      params: Params.UpdatePocketDepositParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePocketStatus(
      params: Params.UpdatePocketStatusParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePocketTradingStats(
      params: Params.UpdatePocketTradingStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePocketWithdrawalStats(
      params: Params.UpdatePocketWithdrawalParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistAddress(
      interactiveAddress: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressWhitelisted(address,address,bool)"(
      actor?: PromiseOrValue<string> | null,
      mintAddress?: PromiseOrValue<string> | null,
      value?: null
    ): AddressWhitelistedEventFilter;
    AddressWhitelisted(
      actor?: PromiseOrValue<string> | null,
      mintAddress?: PromiseOrValue<string> | null,
      value?: null
    ): AddressWhitelistedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PocketInitialized(address,string,address,tuple,uint256)"(
      actor?: PromiseOrValue<string> | null,
      pocketId?: null,
      owner?: PromiseOrValue<string> | null,
      pocketData?: null,
      timestamp?: null
    ): PocketInitializedEventFilter;
    PocketInitialized(
      actor?: PromiseOrValue<string> | null,
      pocketId?: null,
      owner?: PromiseOrValue<string> | null,
      pocketData?: null,
      timestamp?: null
    ): PocketInitializedEventFilter;

    "PocketUpdated(address,string,address,string,tuple,uint256)"(
      actor?: PromiseOrValue<string> | null,
      pocketId?: null,
      owner?: PromiseOrValue<string> | null,
      reason?: null,
      pocketData?: null,
      timestamp?: null
    ): PocketUpdatedEventFilter;
    PocketUpdated(
      actor?: PromiseOrValue<string> | null,
      pocketId?: null,
      owner?: PromiseOrValue<string> | null,
      reason?: null,
      pocketData?: null,
      timestamp?: null
    ): PocketUpdatedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    RELAYER(overrides?: CallOverrides): Promise<BigNumber>;

    allowedInteractiveAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistedIdMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalanceInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwnerOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStopConditionsOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTradingInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initializeUserPocket(
      params: Params.CreatePocketParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAbleToClose(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAbleToDeposit(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAbleToPause(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAbleToRestart(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAbleToUpdate(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAbleToWithdraw(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwnerOf(
      pocketId: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReadyToClosePosition(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isReadyToSwap(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pockets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shouldClosePocket(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldOpenPosition(
      pocketId: PromiseOrValue<string>,
      swappedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      receivedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldStopLoss(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    shouldTakeProfit(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocket(
      params: Params.UpdatePocketParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocketClosingPositionStats(
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocketDepositStats(
      params: Params.UpdatePocketDepositParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocketStatus(
      params: Params.UpdatePocketStatusParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocketTradingStats(
      params: Params.UpdatePocketTradingStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePocketWithdrawalStats(
      params: Params.UpdatePocketWithdrawalParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    whitelistAddress(
      interactiveAddress: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_PRECISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    RELAYER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowedInteractiveAddresses(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistedIdMap(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalanceInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwnerOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStopConditionsOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTradingInfoOf(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initializeUserPocket(
      params: Params.CreatePocketParamsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAbleToClose(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAbleToDeposit(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAbleToPause(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAbleToRestart(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAbleToUpdate(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAbleToWithdraw(
      pocketId: PromiseOrValue<string>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwnerOf(
      pocketId: PromiseOrValue<string>,
      target: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReadyToClosePosition(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isReadyToSwap(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pockets(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shouldClosePocket(
      pocketId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldOpenPosition(
      pocketId: PromiseOrValue<string>,
      swappedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      receivedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldStopLoss(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    shouldTakeProfit(
      pocketId: PromiseOrValue<string>,
      swappedTargetTokenAmount: PromiseOrValue<BigNumberish>,
      receivedBaseTokenAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocket(
      params: Params.UpdatePocketParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocketClosingPositionStats(
      params: Params.UpdatePocketClosingPositionStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocketDepositStats(
      params: Params.UpdatePocketDepositParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocketStatus(
      params: Params.UpdatePocketStatusParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocketTradingStats(
      params: Params.UpdatePocketTradingStatsParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePocketWithdrawalStats(
      params: Params.UpdatePocketWithdrawalParamsStruct,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    whitelistAddress(
      interactiveAddress: PromiseOrValue<string>,
      value: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
