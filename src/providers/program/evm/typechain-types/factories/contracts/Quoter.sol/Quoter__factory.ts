/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  Quoter,
  QuoterInterface,
} from "../../../contracts/Quoter.sol/Quoter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_WETH9",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WETH9",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    name: "quoteExactInput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "quoteExactInputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
    ],
    name: "quoteExactOutput",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenIn",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenOut",
        type: "address",
      },
      {
        internalType: "uint24",
        name: "fee",
        type: "uint24",
      },
      {
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        internalType: "uint160",
        name: "sqrtPriceLimitX96",
        type: "uint160",
      },
    ],
    name: "quoteExactOutputSingle",
    outputs: [
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "amount0Delta",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "amount1Delta",
        type: "int256",
      },
      {
        internalType: "bytes",
        name: "path",
        type: "bytes",
      },
    ],
    name: "uniswapV3SwapCallback",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60c060405234156100105760006000fd5b620015cb8038038060c00160c0811067ffffffffffffffff8211171561003257fe5b8060405250808260c039604081121561004b5760006000fd5b505061005760c06100a5565b61006a61006460e06100a5565b826100d6565b5060805160a0516114e680620000e5600039818061010f525082806101605280610b475280610d74528061121c5250806000f35050506100e3565b60008151905073ffffffffffffffffffffffffffffffffffffffff8116811415156100d05760006000fd5b5b919050565b806080528160a0525b5050565bfe608060405260048036101515610243576000803560e01c632f80bb1d8114610068576330d07f2181146100a757634aa4a4fc81146100ec5763c45a0155811461013d5763cdca1753811461018e5763f7729d4381146101cd5763fa461e33811461021257610240565b3415610072578182fd5b61007c3684610334565b6100868183610f1a565b91505061009283610661565b8061009d838361064f565b0381f35050610240565b34156100b1578182fd5b6100bb36846102bb565b6100c88183858789610d30565b9450505050506100d783610661565b806100e2838361064f565b0381f35050610240565b34156100f6578182fd5b61010036846102a5565b61010982610661565b806101347f0000000000000000000000000000000000000000000000000000000000000000836105b7565b0381f350610240565b3415610147578182fd5b61015136846102a5565b61015a82610661565b806101857f0000000000000000000000000000000000000000000000000000000000000000836105b7565b0381f350610240565b3415610198578182fd5b6101a23684610334565b6101ac8183610ccf565b9150506101b883610661565b806101c3838361064f565b0381f35050610240565b34156101d7578182fd5b6101e136846102bb565b6101ee8183858789610b12565b9450505050506101fd83610661565b80610208838361064f565b0381f35050610240565b341561021c578182fd5b61022636846103a1565b6102318183856111e5565b5050508161023e83610661565bf35b50505b5060006000fd6114e5565b600082601f8301121515610260578081fd5b813561027361026e8261068c565b610661565b818152846020838601011115610287578283fd5b81602085016020830137826020838301015280925050505b92915050565b600081830312156102b65760006000fd5b5b5050565b6000600060006000600060a086880312156102d4578081fd5b85356102df816114bc565b8095505060208601356102f1816114bc565b80945050604086013562ffffff81168114151561030c578182fd5b80935050606086013591506080860135610325816114bc565b809150505b9295509295909350565b6000600060408385031215610347578182fd5b823567ffffffffffffffff81111561035d578283fd5b6103698582860161024e565b925050602083013590505b9250929050565b600060006040838503121561038e578182fd5b82519150602083015190505b9250929050565b600060006000606084860312156103b6578283fd5b8335925060208401359150604084013567ffffffffffffffff8111156103da578182fd5b6103e68682870161024e565b9150505b9250925092565b600060208284031215610402578081fd5b815167ffffffffffffffff811115610418578182fd5b808301905083601f820112151561042d578182fd5b805161044061043b8261068c565b610661565b818152856020838501011115610454578384fd5b61046582602083016020860161077a565b8093505050505b92915050565b600060208284031215610483578081fd5b815190505b92915050565b600081518084526104a681602086016020860161077a565b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019150505b92915050565b60007fffffffffffffffffffffffffffffffffffffffff000000000000000000000000808460601b1683527fffffff00000000000000000000000000000000000000000000000000000000008560e81b166014840152808660601b16601784015250602b820190505b949350505050565b60007fff0000000000000000000000000000000000000000000000000000000000000082527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360601b1660018301528360158301528460358301526055820190505b949350505050565b600060208201905073ffffffffffffffffffffffffffffffffffffffff831682525b92915050565b600073ffffffffffffffffffffffffffffffffffffffff8084168352841515602084015285604084015280871660608401525060a0608083015261062660a083018861048e565b90505b9695505050505050565b600060208252610646602083018461048e565b90505b92915050565b60006020820190508282525b92915050565b6000604051905081810181811067ffffffffffffffff8211171561068157fe5b80604052505b919050565b600067ffffffffffffffff8211156106a057fe5b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160190505b919050565b600073ffffffffffffffffffffffffffffffffffffffff8083168185168083038211156106fa57fe5b80820193505050505b92915050565b6000821982111561071657fe5b82820190505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff80831681851691508181101561074b57fe5b818103925050505b92915050565b600073ffffffffffffffffffffffffffffffffffffffff821690505b919050565b60005b838110156107995780820151818401525b60208101905061077d565b838111156107a8576000848401525b505b505050565b60003d600081146107fa576107e87fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f3d0116610661565b91503d82523d6000602084013e6107ff565b606091505b505b90565b600073ffffffffffffffffffffffffffffffffffffffff808451168160208601511691508181101515610835578283fd5b62ffffff60408601511660405160208101838152846040830152826060830152606082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0945084609f8301169350836040528151812092505050602082016108c07fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5483888461054c565b91508383830301835283601f8301166040526108e66108e184518320610759565b610759565b9450505050505b92915050565b600060006000610903818561108c565b925060178451101561096f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f746f55696e7432345f6f75744f66426f756e64730000000000000000000000006044820152606481fd505b6017840151905061098160178561108c565b91505b9193909250565b6000604080516060810167ffffffffffffffff82821081831117156109ac57fe5b818452848352846020840152848484015273ffffffffffffffffffffffffffffffffffffffff925082871683871611156109ea578691508596508195505b83519150606082018281108282111715610a0057fe5b80855250508185168152818616602082015262ffffff8716838201528093505050505b9392505050565b6000818251602081141515610af5576044811015610aa2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f556e6578706563746564206572726f72000000000000000000000000000000006044820152606481fd505b600484019350610abb60248551840101602484016103f1565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815280610aef8360048401610633565b0381fd50505b5050610b0a6020835184010160208401610472565b90505b919050565b600080905073ffffffffffffffffffffffffffffffffffffffff80841681841610610b7182610b6b610b4589898961098b565b7f0000000000000000000000000000000000000000000000000000000000000000610804565b16610759565b610b7a886111ad565b6000848b161560008114610bd65760008560008114610baa57610ba360016401000276a36106d1565b9150610bcc565b610bc9600173fffd8963efd1fc6a506488495d951d5263988d26610722565b91505b5080925050610bda565b8b91505b506040519450610bef888a89602089016104db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08087830301875280601f83011691505080604052833b1515610c325760006000fd5b7f128acb0800000000000000000000000000000000000000000000000000000000815260408182610c6a8986888b3060048a016105df565b03836000885af195508515610c9657610c823d611459565b8101604052610c933d82018261037b565b50505b5050505050801560008114610cc257610cb5610cb06107af565b610a2a565b92505050610cc656610cc3565b5b50505b95945050505050565b60008090505b600115610d2957604282511015610ceb836108f3565b610cf9600088838587610b12565b96505050508060008114610d1757610d1084610f82565b9350610d21565b8492505050610d2a565b50505b610cd5565b5b92915050565b600080905073ffffffffffffffffffffffffffffffffffffffff80841681841610818816158015610d6057876000555b610d9e83610d98610d728a8a8a61098b565b7f0000000000000000000000000000000000000000000000000000000000000000610804565b16610759565b9250610db1610dac896111ad565b61133b565b60008260008114610e0a5760008560008114610dde57610dd760016401000276a36106d1565b9150610e00565b610dfd600173fffd8963efd1fc6a506488495d951d5263988d26610722565b91505b5080925050610e0e565b8b91505b50604051610e21888b8b602085016104db565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08083830301835280601f83011691505080604052863b1515610e645760006000fd5b7f128acb0800000000000000000000000000000000000000000000000000000000815260408182610e9c8587898c3060048a016105df565b038360008b5af196508615610ec857610eb43d611459565b8101604052610ec53d82018261037b565b50505b50505050821560008114610f0b57610ede6107af565b92508115610ef357610ef260006000611489565b5b610efc83610a2a565b945050505050610f1156610f0c565b5b505050505b95945050505050565b60008090505b600115610f7b57604282511015610f36836108f3565b610f44600088838686610d30565b92505050808195508260008114610f6557610f5e86610f82565b9550610f71565b81945050505050610f7c565b505050505b610f20565b5b92915050565b6000610f9060036014610709565b8251610f9e60036014610709565b80821015610fa857fe5b808203915050610fc481610fbd601f84610709565b1015611383565b610fd982610fd28385610709565b1015611383565b8351610ff0610fe88385610709565b8210156113ee565b50828115600081146110105760405191508482526020820160405261107f565b6040519150601f831660208115810280838601018681018883868d01010194505b8082101561104d57845182525b83820191508385019450611031565b508686527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f820116604052505050505b508093505050505b919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffeb8311156110b857fe5b6014830183811015611124576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f746f416464726573735f6f766572666c6f7700000000000000000000000000006044820152606481fd505b808351101561118d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f746f416464726573735f6f75744f66426f756e647300000000000000000000006044820152606481fd505b506c01000000000000000000000000602084840101510490505b92915050565b60007f8000000000000000000000000000000000000000000000000000000000000000821015156111dc578081fd5b8190505b919050565b6000808213808115156111f85782851391505b61120182611372565b61120a866108f3565b935061124061121a85838561098b565b7f0000000000000000000000000000000000000000000000000000000000000000611301565b5084935084858460008114611283576112588a61133b565b73ffffffffffffffffffffffffffffffffffffffff80861681881610985050899350809250506112b3565b61128c8961133b565b73ffffffffffffffffffffffffffffffffffffffff808716818716109850508a9350809250505b5085600081146112ce576040519550818652602086fd6112f3565b87549550851515156112e6576112e5868314611372565b5b6040519550828652602086fd5b50505050505050505b505050565b600073ffffffffffffffffffffffffffffffffffffffff6113228484610804565b16905080331415156113345760006000fd5b5b92915050565b60007f800000000000000000000000000000000000000000000000000000000000000182121561136757fe5b81810390505b919050565b80151561137f5760006000fd5b5b50565b8015156113ea576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606481fd505b5b50565b801515611455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606481fd505b5b50565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011690505b919050565b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600884021b1981168255505b5050565b73ffffffffffffffffffffffffffffffffffffffff8116811415156114e15760006000fd5b5b50565b";

type QuoterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: QuoterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Quoter__factory extends ContractFactory {
  constructor(...args: QuoterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Quoter> {
    return super.deploy(_factory, _WETH9, overrides || {}) as Promise<Quoter>;
  }
  override getDeployTransaction(
    _factory: PromiseOrValue<string>,
    _WETH9: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_factory, _WETH9, overrides || {});
  }
  override attach(address: string): Quoter {
    return super.attach(address) as Quoter;
  }
  override connect(signer: Signer): Quoter__factory {
    return super.connect(signer) as Quoter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): QuoterInterface {
    return new utils.Interface(_abi) as QuoterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Quoter {
    return new Contract(address, _abi, signerOrProvider) as Quoter;
  }
}
