/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PocketChef,
  PocketChefInterface,
} from "../../contracts/PocketChef";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updatedAddress",
        type: "address",
      },
    ],
    name: "RegistryUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updatedAddress",
        type: "address",
      },
    ],
    name: "VaultUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "closePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createPocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createPocketAndDepositEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "createPocketAndDepositToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "depositEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "pausePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract PocketRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "restartPocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
    ],
    name: "setVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "tryClosingPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "tryMakingDCASwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.UpdatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "updatePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract PocketVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100c2576000549060ff8260081c16610070575060ff80821610610035575b604051612eba9081620000c88239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6080604052600436101561001257600080fd5b6000803560e01c80631cbe264a146119b957806331fb67c21461175257806333ad57e4146117005780633f4ba83a146116635780635c975abb146116405780635e54c034146113f95780636817031b14611380578063715018a61461131757806377c76321146112cd5780637b103999146112a65780637fa97c26146111365780638129fc1c14610fb25780638456cb5914610f125780638da5cb5b14610eeb578063a91ee0dc14610e72578063ac9650d814610c0d578063aea7ed3714610be8578063cac9c00114610608578063cbfc305b14610476578063dc6514b614610404578063e3135f0e146103ed578063e4a479b5146101f5578063f2fde38b1461014e5763fbfa77cf1461012557600080fd5b3461014b578060031936011261014b5760206001600160a01b0360fc5416604051908152f35b80fd5b503461014b57602036600319011261014b57610168611f5e565b610170611ffb565b6001600160a01b0381161561018b5761018890612053565b80f35b608460405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b503461014b5760031990602036830181136103e95760043567ffffffffffffffff81116103e55761022a903690600401611f30565b90936001600160a01b0360fb54166040517f80b443c300000000000000000000000000000000000000000000000000000000815284818061027033888c600485016125b0565b0381855afa9081156103da5786916103ad575b5015610343576102a585966040519461029b8661210a565b33865236916121af565b8484015260016040840152803b1561033f578492836040610302947f555345525f5245535441525445445f504f434b455400000000000000000000008251988997889663384e1a0960e21b885285600489015260448801906126c0565b868103938401602488015260158152015201925af18015610334576103245750f35b61032d906120da565b61014b5780f35b6040513d84823e3d90fd5b8480fd5b6084846040519062461bcd60e51b82526004820152602660248201527f4f7065726174696f6e206572726f723a2063616e6e6f7420726573746172742060448201527f706f636b657400000000000000000000000000000000000000000000000000006064820152fd5b6103cd9150853d87116103d3575b6103c58183612126565b810190612598565b38610283565b503d6103bb565b6040513d88823e3d90fd5b8280fd5b5080fd5b503461014b576101886103ff36611fc8565b612399565b503461014b576003196040368201126103e9576004359067ffffffffffffffff82116103e557610200908260040192360301126103e95761046561046e916104516002606554141561254d565b600260655561045f81612399565b80612160565b60243591612ba0565b600160655580f35b503461014b5760031990602036830181136103e95760043567ffffffffffffffff81116103e5576104ab903690600401611f30565b90936001600160a01b0360fb54166040517fe6068d010000000000000000000000000000000000000000000000000000000081528481806104f133888c600485016125b0565b0381855afa9081156103da5786916105eb575b501561059b5761051c85966040519461029b8661210a565b8484015260036040840152803b1561033f578492836040610579947f555345525f434c4f5345445f504f434b455400000000000000000000000000008251988997889663384e1a0960e21b885285600489015260448801906126c0565b868103938401602488015260128152015201925af18015610334576103245750f35b6084846040519062461bcd60e51b825260048201526024808201527f4f7065726174696f6e206572726f723a2063616e6e6f7420636c6f736520706f60448201526318dad95d60e21b6064820152fd5b6106029150853d87116103d3576103c58183612126565b38610504565b503461014b5760031990602036830181136103e95760043567ffffffffffffffff81116103e55761063d903690600401611f30565b61064f6002606596939654141561254d565b60026065556001600160a01b03948560fb54169160405163983d273760e01b81528581600481875afa8015610b065786908890610bb4575b604051632474521560e21b8152600481019190915233602482015291508180604481015b0381875afa908115610b0657906106c9918891610b97575b506125d8565b6040517fc11bc90f00000000000000000000000000000000000000000000000000000000815285600482015285816024958180610709898201888a612286565b03915afa908115610b06578791610b7a575b5015610b11578660fc5416966040805180997f6afd431a000000000000000000000000000000000000000000000000000000008252886004830152818a816107668a8201898b612286565b03925af18015610b065787988891610ad1575b5060fb546040517f125167ef00000000000000000000000000000000000000000000000000000000815290831691908881806107bb858f8a8c6004860161265f565b0381865afa908115610ac6578a91610aa9575b5015610a40578899604051926107e3846120a8565b3384526107f13687896121af565b938a81019485526040810192835260608101938452813b15610a3c578b8693819560405197889687957f368e0b6c00000000000000000000000000000000000000000000000000000000875260048701604090525116604486015251606485016080905260c4850161086291611f88565b915160848501525160a48401528c838203918d83018d860152601e8152017f4f50455241544f525f555044415445445f54524144494e475f535441545300009052604001925af1908115610a19578891610a24575b505060fb5416916040517f534ca7a20000000000000000000000000000000000000000000000000000000081528660048201528681806108fa8882018787612286565b0381875afa908115610a195788916109fc575b5061091c575b86600160655580f35b610937906040519261092d8461210a565b33845236916121af565b8582015260036040820152813b156109f85785606081957f4f505f434f4e444954494f4e530000000000000000000000000000000000000060406109b7977f4f50455241544f525f434c4f5345445f504f434b45545f4455455f544f5f535482519b8c9a8b9963384e1a0960e21b8b528560048c015260448b01906126c0565b92898403968701908a0152602d8352820152015201925af18015610334576109e4575b8080808080610913565b6109ed906120da565b61014b5780386109da565b8580fd5b610a139150873d89116103d3576103c58183612126565b3861090d565b6040513d8a823e3d90fd5b610a2d906120da565b610a385786386108b7565b8680fd5b8b80fd5b608488602d886040519262461bcd60e51b845260048401528201527f4f7065726174696f6e206572726f723a2062757920636f6e646974696f6e206460448201527f6f6573206e6f74207265616368000000000000000000000000000000000000006064820152fd5b610ac09150893d8b116103d3576103c58183612126565b386107ce565b6040513d8c823e3d90fd5b9050610af691985060403d604011610aff575b610aee8183612126565b810190612649565b97909738610779565b503d610ae4565b6040513d89823e3d90fd5b6084856038856040519262461bcd60e51b845260048401528201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f7420726561647920746f20706572666f726d207377617000000000000000006064820152fd5b610b919150863d88116103d3576103c58183612126565b3861071b565b610bae9150873d89116103d3576103c58183612126565b386106c3565b5081813d8311610be1575b610bc98183612126565b81010312610bdc57856106ab9151610687565b600080fd5b503d610bbf565b5061046e610c07610bf836611fc8565b6104516002606554141561254d565b906128bf565b503461014b576020806003193601126103e95760043567ffffffffffffffff9283821161014b573660238301121561014b57816004013593841161014b57602480830194600595368383891b87010111610e6e57610c6a82612148565b94610c786040519687612126565b828652601f19610c8784612148565b0187865b828110610e5e57505050845b838110610cfd5750505050506040519280840190808552835180925280604083818801981b870101940192955b828710610cd15785850386f35b909192938280610ced600193603f198a82030186528851611f88565b9601920196019592919092610cc4565b610d17610d1086838c1b85010185612160565b36916121af565b303b15610df5578680828b610db494519101305af43d15610dee573d610d3c81612193565b90610d4a6040519283612126565b81523d898c83013e5b60405191610d608361210a565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8c8401527f206661696c6564000000000000000000000000000000000000000000000000006040840152612210565b610dbe82896121e6565b52610dc981886121e6565b506000198114610ddb57600101610c97565b8486634e487b7160e01b81526011600452fd5b6060610d53565b6084896026886040519262461bcd60e51b845260048401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b606082828b010152018890610c8b565b8380fd5b503461014b57602036600319011261014b576001600160a01b03610e94611f5e565b610e9c611ffb565b168073ffffffffffffffffffffffffffffffffffffffff1960fb54161760fb556040519081527f482b97c53e48ffa324a976e2738053e9aff6eee04d8aac63b10e19411d869b8260203392a280f35b503461014b578060031936011261014b5760206001600160a01b0360975416604051908152f35b503461014b578060031936011261014b57610f2b611ffb565b60335460ff8116610f6e5760019060ff1916176033557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586020604051338152a180f35b606460405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b503461014b578060031936011261014b57805460ff8160081c161590818092611129575b8015611112575b156110a85760ff1980821660011784556110289183611097575b5060ff845460081c169061100a82612e13565b61101382612e13565b6033541660335561102381612e13565b612e13565b61103133612053565b81549061105a60ff8360081c1661104781612e13565b61105081612e13565b6001606555612e13565b611062575080f35b61ff00191681557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a180f35b61ffff191661010117845538610ff7565b608460405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b158015610fdd5750600160ff821614610fdd565b50600160ff821610610fd6565b503461014b5760031990602036830181136103e95760043567ffffffffffffffff81116103e55761116b903690600401611f30565b90936001600160a01b0360fb54166040517f9d92d7370000000000000000000000000000000000000000000000000000000081528481806111b133888c600485016125b0565b0381855afa9081156103da578691611289575b5015611239576111dc85966040519461029b8661210a565b8484015260026040840152803b1561033f578492836040610579947f555345525f5041555345445f504f434b455400000000000000000000000000008251988997889663384e1a0960e21b885285600489015260448801906126c0565b6084846040519062461bcd60e51b825260048201526024808201527f4f7065726174696f6e206572726f723a2063616e6e6f7420706175736520706f60448201526318dad95d60e21b6064820152fd5b6112a09150853d87116103d3576103c58183612126565b386111c4565b503461014b578060031936011261014b5760206001600160a01b0360fb5416604051908152f35b50602036600319011261014b5760043567ffffffffffffffff81116103e9576112fd61046e913690600401611f30565b9061130d6002606554141561254d565b60026065556128bf565b503461014b578060031936011261014b57611330611ffb565b60006001600160a01b0360975473ffffffffffffffffffffffffffffffffffffffff198116609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b503461014b57602036600319011261014b576001600160a01b036113a2611f5e565b6113aa611ffb565b168073ffffffffffffffffffffffffffffffffffffffff1960fc54161760fc556040519081527f483bdedaaf23706a9800ac1af0d852b34927780d79f9d6ba60a80c7cad75ea3960203392a280f35b503461014b5760209060031982813601126103e9576004359067ffffffffffffffff82116103e557816004016101808083853603011261033f576001600160a01b0360fb5416906114848761144e8580612160565b60405193849283927fb612f8660000000000000000000000000000000000000000000000000000000084523391600485016125b0565b0381865afa908115610b06578791611623575b50156115b9578596823b15610a38578694859160405197889687957f3740c18300000000000000000000000000000000000000000000000000000000875260048701604090526114e78280612254565b909160448901526101c48801906114fd92612286565b9060248301356064880152604483013560848801526064830161151f916122a7565b8783036043190160a489015261153592916122fc565b608482013560c48701529061155060e4870160a48301612354565b6101446115638782016101048401612377565b6115739161018488019101612377565b848103928301602486015260128152017f555345525f5550444154455f504f434b455400000000000000000000000000009052604001925af18015610334576103245750f35b6084876040519062461bcd60e51b82526004820152603160248201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f742061626c6520746f207570646174650000000000000000000000000000006064820152fd5b61163a9150883d8a116103d3576103c58183612126565b38611497565b503461014b578060031936011261014b57602060ff603354166040519015158152f35b503461014b578060031936011261014b5761167c611ffb565b60335460ff8116156116bc5760ff19166033557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6020604051338152a180f35b606460405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b503461014b57604036600319011261014b5760043567ffffffffffffffff81116103e95761173561046e913690600401611f30565b6117446002606554141561254d565b600260655560243591612ba0565b503461014b5760031990602036830181136103e95760043567ffffffffffffffff81116103e557611787903690600401611f30565b90936117986002606554141561254d565b60026065556001600160a01b038060fb54168460405180927f7bc0394000000000000000000000000000000000000000000000000000000000825281806117e58c8a3391600485016125b0565b03915afa9081156103da57869161199c575b50156119325761180f85966040519461029b866120ee565b848401528060fc5416803b156109f8578560405180927f61a45ae600000000000000000000000000000000000000000000000000000000825287600483015281838161185e602482018b612ded565b03925af19081156103da57869161191e575b505060fb5416803b1561033f5784928360406118e1947f555345525f57495448445245575f46554e440000000000000000000000000000825198899788967fbcf7a1220000000000000000000000000000000000000000000000000000000088528560048901526044880190612ded565b868103938401602488015260128152015201925af180156103345761190a575b50600160655580f35b611913906120da565b61014b578038611901565b611927906120da565b61033f578438611870565b6084846040519062461bcd60e51b82526004820152602c60248201527f4f7065726174696f6e206572726f723a2063616e6e6f7420776974686472617760448201527f20706f636b65742066756e6400000000000000000000000000000000000000006064820152fd5b6119b39150853d87116103d3576103c58183612126565b386117f7565b503461014b57602036600319011261014b5760043567ffffffffffffffff81116103e9576119eb903690600401611f30565b6119fd6002606594939454141561254d565b60026065556001600160a01b0360fb541660405163983d273760e01b8152602081600481855afa908115611ef2578491611efd575b50604051632474521560e21b81526004810191909152336024820152602081604481855afa908115611ef25790611a6f918591611ed957506125d8565b602060405180927fb3fd1da50000000000000000000000000000000000000000000000000000000082528260048301528180611aaf60248201888b612286565b03915afa908115611e45578391611eba575b5015611e50576001600160a01b0360fc5416926040805180957f9c89bb3d00000000000000000000000000000000000000000000000000000000825260206004830152818681611b15602482018989612286565b03925af18015611e455783948491611e20575b506001600160a01b0360fb5416946040517fd3fc80d900000000000000000000000000000000000000000000000000000000815260208180611b7086868a8a6004860161265f565b03818a5afa9081156103da578691611e01575b506040517f1416642e00000000000000000000000000000000000000000000000000000000815260208180611bbe87878b8b6004860161265f565b03818b5afa908115610b06578791611de2575b50818215611ddb575b15611d7157611cbb575b859650611bf5575b84600160655580f35b611c126001600160a01b0360fb54169360405195610d10876120a8565b845233602085015260408401526060830152803b15611cb757611c558391604093838551958694859363b48093e160e01b85528260048601526044850190612683565b7f4f50455241544f525f53544f505f4c4f535300000000000000000000000000006020858303926003198401602488015260128152015201925af1801561033457611ca3575b808080611bec565b611cac906120da565b61014b578038611c9b565b5050fd5b604051611cc7816120a8565b611cd23687876121af565b8152336020820152826040820152836060820152873b15610a3857611d176040988892838b519b8c94859363b48093e160e01b85528260048601526044850190612683565b7f4f50455241544f525f54414b455f50524f4649540000000000000000000000006020858303926003198401602488015260148152015201925af180156103da5715611be457949095611d69906120da565b938590611be4565b608460405162461bcd60e51b815260206004820152603a60248201527f4f7065726174696f6e206572726f723a20636c6f73696e6720706f736974696f60448201527f6e20636f6e646974696f6e20646f6573206e6f742072656163680000000000006064820152fd5b5080611bda565b611dfb915060203d6020116103d3576103c58183612126565b38611bd1565b611e1a915060203d6020116103d3576103c58183612126565b38611b83565b9050611e3c91945060403d604011610aff57610aee8183612126565b93909338611b28565b6040513d85823e3d90fd5b608460405162461bcd60e51b815260206004820152603a60248201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f7420726561647920746f20636c6f736520706f736974696f6e0000000000006064820152fd5b611ed3915060203d6020116103d3576103c58183612126565b38611ac1565b610bae915060203d6020116103d3576103c58183612126565b6040513d86823e3d90fd5b90506020813d602011611f28575b81611f1860209383612126565b81010312610e6e57516020611a32565b3d9150611f0b565b9181601f84011215610bdc5782359167ffffffffffffffff8311610bdc5760208381860195010111610bdc57565b600435906001600160a01b0382168203610bdc57565b35906001600160a01b0382168203610bdc57565b919082519283825260005b848110611fb4575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611f93565b60031990602081830112610bdc576004359167ffffffffffffffff8311610bdc578261020092030112610bdc5760040190565b6001600160a01b0360975416330361200f57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b609754906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6080810190811067ffffffffffffffff8211176120c457604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116120c457604052565b6040810190811067ffffffffffffffff8211176120c457604052565b6060810190811067ffffffffffffffff8211176120c457604052565b90601f8019910116810190811067ffffffffffffffff8211176120c457604052565b67ffffffffffffffff81116120c45760051b60200190565b903590601e1981360301821215610bdc570180359067ffffffffffffffff8211610bdc57602001918136038313610bdc57565b67ffffffffffffffff81116120c457601f01601f191660200190565b9291926121bb82612193565b916121c96040519384612126565b829481845281830111610bdc578281602093846000960137010152565b80518210156121fa5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b9091901561221c575090565b81511561222c5750805190602001fd5b6122509060405191829162461bcd60e51b8352602060048401526024830190611f88565b0390fd5b9035601e1982360301811215610bdc57016020813591019167ffffffffffffffff8211610bdc578136038313610bdc57565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610bdc57016020813591019167ffffffffffffffff8211610bdc578160061b36038313610bdc57565b600411156122e657565b634e487b7160e01b600052602160045260246000fd5b918181526020809101929160009182905b82821061231c57505050505090565b9091929394853581528186013560048110156109f857908161233f6001936122dc565b8184015260409081019601949392019061230d565b60409080358352602081013560208401520135906007821015610bdc5760400152565b80356004811015610bdc576020918161239084936122dc565b84520135910152565b602081019081356001600160a01b0390818116809103610bdc573303612509578060fb5416803b15610bdc576124e19360006124a1938195604051978896879586947fe92c3598000000000000000000000000000000000000000000000000000000008652602060048701528061242f6124296124168880612254565b61020060248c01526102248b0191612286565b93611f74565b1660448701528061244260408701611f74565b1660648701528061245560608701611f74565b16608487015261246760808601611f74565b1660a486015260a084013560c486015260c084013560e486015261248e60e08501856122a7565b86830360231901610104880152906122fc565b916101008101356101248501526124c061014485016101208301612354565b6124d26101a485016101808301612377565b6101c06101e485019101612377565b03925af180156124fd576124f25750565b6124fb906120da565b565b6040513d6000823e3d90fd5b606460405162461bcd60e51b815260206004820152602060248201527f496e76616c696420706f636b65743a206f776e6572206d69736d6174636865736044820152fd5b1561255457565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b90816020910312610bdc57518015158103610bdc5790565b916125d16020926001600160a01b0392969596604086526040860191612286565b9416910152565b156125df57565b608460405162461bcd60e51b815260206004820152603d60248201527f4f7065726174696f6e206572726f723a206f6e6c79206f70657261746f72206960448201527f73207065726d697474656420666f7220746865206f7065726174696f6e0000006064820152fd5b9190826040910312610bdc576020825192015190565b906126799060409396959496606084526060840191612286565b9460208201520152565b9060608061269a8451608085526080850190611f88565b936001600160a01b03602082015116602085015260408101516040850152015191015290565b906001600160a01b03825116815260406126e96020840151606060208501526060840190611f88565b9201519060058210156122e6576040015290565b1561270457565b606460405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e206572726f723a2063616e6e6f74206465706f736974006044820152fd5b51906001600160a01b0382168203610bdc57565b9190826040910312610bdc57604051612774816120ee565b809280516004811015610bdc578252602090810151910152565b9190828103906101c08212610bdc576127a684612748565b936127b360208201612748565b936127c060408301612748565b9360608301519360808401519360a081015193606060c08301519460df190112610bdc576040516127f08161210a565b60e083015181526101008301516020820152610120830151906007821015610bdc576128349160408201529361018061282d82610140870161275c565b940161275c565b90565b9060606001600160a01b03808451168352816128626020860151608060208701526080860190611f88565b946040810151604086015201511691015290565b61288860409283835283830190612837565b906020818303910152601381527f555345525f4445504f53495445445f46554e440000000000000000000000000060208201520190565b6000913415612b5c576001600160a01b03918260fb541692604093845192624418eb60e81b84526020916004948381806128fd338b888c85016125b0565b0381855afa908115612ae7579061291b918a91612b3f575b506126fd565b8651809163381635c960e21b825284878301526101c09283918180612944602482018d8a612286565b03915afa918215612ae757908592918a92612b08575b50501690813b15612b045786517fd0e30db00000000000000000000000000000000000000000000000000000000081528881878134875af18015612ae757612af1575b5060fc54875163095ea7b360e01b81529085166001600160a01b031686820190815234602082015284908290819060400103818c875af18015612ae757906129fc9291612aca575b508751966129f2886120a8565b33885236916121af565b82860152348686015260608501528160fc541690813b15610a3857869086519283916322da9c3160e21b835286830152818381612a3c602482018b612837565b03925af18015612ac057908691612aac575b505060fb541690813b1561033f57918491849383612a7e96518097819582946399ba805760e01b84528301612876565b03925af1908115612aa35750612a92575050565b612a9c82916120da565b61014b5750565b513d84823e3d90fd5b612ab5906120da565b61033f578438612a4e565b85513d88823e3d90fd5b612ae090853d87116103d3576103c58183612126565b50386129e5565b88513d8b823e3d90fd5b612afd909891986120da565b963861299d565b8780fd5b612b279250803d10612b38575b612b1f8183612126565b81019061278e565b50505050505050509050388061295a565b503d612b15565b612b569150853d87116103d3576103c58183612126565b38612915565b606460405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e206572726f723a20696e76616c696420616d6f756e74006044820152fd5b9060fb54926000936001600160a01b03809116604094855193624418eb60e81b8552602092600495848180612bd9338c898d85016125b0565b0381855afa908115612da55790612bf6918b91612daf57506126fd565b8751809163381635c960e21b825285888301526101c09283918180612c208d60248301908b612286565b03915afa918215612da557908692918b92612dc6575b5050169187517f23b872dd000000000000000000000000000000000000000000000000000000008152338782015230602482015282604482015284816064818d885af1908115612da55790612c91918b91612daf57506126fd565b612cca84838760fc54168b51938492839263095ea7b360e01b84528c8401602090939291936001600160a01b0360408201951681520152565b03818d885af18015612da55790612cf89291612d88575b50885197612cee896120a8565b33895236916121af565b838701528686015260608501528160fc541690813b15610a3857869086519283916322da9c3160e21b835286830152818381612d37602482018b612837565b03925af18015612ac057612d75575b5060fb541690813b1561033f57918491849383612a7e96518097819582946399ba805760e01b84528301612876565b612d81909591956120da565b9338612d46565b612d9e90863d88116103d3576103c58183612126565b5038612ce1565b89513d8c823e3d90fd5b612b569150863d88116103d3576103c58183612126565b612ddc9250803d10612b3857612b1f8183612126565b505050505050505090503880612c36565b9060406020612834936001600160a01b0381511684520151918160208201520190611f88565b15612e1a57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fdfea26469706673582212203cb42e8ce283b113d8c97c574ec9dc06994128960d869acbff3e13fe1978992864736f6c63430008130033";

type PocketChefConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PocketChefConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PocketChef__factory extends ContractFactory {
  constructor(...args: PocketChefConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PocketChef> {
    return super.deploy(overrides || {}) as Promise<PocketChef>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PocketChef {
    return super.attach(address) as PocketChef;
  }
  override connect(signer: Signer): PocketChef__factory {
    return super.connect(signer) as PocketChef__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PocketChefInterface {
    return new utils.Interface(_abi) as PocketChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PocketChef {
    return new Contract(address, _abi, signerOrProvider) as PocketChef;
  }
}
