/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  PocketChef,
  PocketChefInterface,
} from "../../contracts/PocketChef";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updatedAddress",
        type: "address",
      },
    ],
    name: "RegistryUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "actor",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "updatedAddress",
        type: "address",
      },
    ],
    name: "VaultUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "closePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createPocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "createPocketAndDepositEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
          {
            internalType: "address",
            name: "ammRouterAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "baseTokenAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "targetTokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.CreatePocketParams",
        name: "params",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "depositAmount",
        type: "uint256",
      },
    ],
    name: "createPocketAndDepositToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "depositEther",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes[]",
        name: "data",
        type: "bytes[]",
      },
    ],
    name: "multicall",
    outputs: [
      {
        internalType: "bytes[]",
        name: "results",
        type: "bytes[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "pausePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "registry",
    outputs: [
      {
        internalType: "contract PocketRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "restartPocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "registryAddress",
        type: "address",
      },
    ],
    name: "setRegistry",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "vaultAddress",
        type: "address",
      },
    ],
    name: "setVault",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "tryClosingPosition",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "tryMakingDCASwap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "string",
            name: "id",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "startAt",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "batchVolume",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
              {
                internalType: "enum Types.StopConditionOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.StopCondition[]",
            name: "stopConditions",
            type: "tuple[]",
          },
          {
            internalType: "uint256",
            name: "frequency",
            type: "uint256",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "value0",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "value1",
                type: "uint256",
              },
              {
                internalType: "enum Types.ValueComparisonOperator",
                name: "operator",
                type: "uint8",
              },
            ],
            internalType: "struct Types.ValueComparison",
            name: "openingPositionCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "takeProfitCondition",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "enum Types.TradingStopConditionType",
                name: "stopType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "value",
                type: "uint256",
              },
            ],
            internalType: "struct Types.TradingStopCondition",
            name: "stopLossCondition",
            type: "tuple",
          },
        ],
        internalType: "struct Params.UpdatePocketParams",
        name: "params",
        type: "tuple",
      },
    ],
    name: "updatePocket",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "vault",
    outputs: [
      {
        internalType: "contract PocketVault",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pocketId",
        type: "string",
      },
    ],
    name: "withdraw",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346100c2576000549060ff8260081c16610070575060ff80821610610035575b604051612deb9081620000c88239f35b60ff90811916176000557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a138610025565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c9081631cbe264a14611ef457816331fb67c214611ca75783826333ad57e414611c62575081633f4ba83a14611bc35781635c975abb14611b9f5781635e54c0341461195c5781636817031b146118e3578163715018a61461187a57816377c76321146117c15781637b103999146117995781637fa97c26146116305781638129fc1c146114a85781638456cb59146114075781638da5cb5b146113df578163a91ee0dc14611366578163ac9650d814611107578163aea7ed3714610eac578163cac9c001146108e8578163cbfc305b1461075b57838263dc6514b61461041057508163e3135f0e146103f9578163e4a479b514610206578163f2fde38b14610159575063fbfa77cf1461012f57600080fd5b346101555781600319360112610155576020906001600160a01b0360fc54169051908152f35b5080fd5b905034610202576020366003190112610202576101746123f6565b9161017d612493565b6001600160a01b038316156101995783610196846124eb565b80f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b8383346101555760209060031982813601126103f557843567ffffffffffffffff81116103f15761023a90369087016123c8565b9390956001600160a01b0360fb54169084517f80b443c30000000000000000000000000000000000000000000000000000000081528381806102818c8b3391888501612a4c565b0381865afa9081156103e75788916103ba575b5015610352576102b587988651976102ab896125a2565b3389523691612647565b83870152600185870152813b1561034e57868581957f555345525f5245535441525445445f504f434b45540000000000000000000000829661030e84519b8c998a9863384e1a0960e21b8a528901526044880190612b1f565b868103938401602488015260158152015201925af190811561034557506103325750f35b61033b90612572565b6103425780f35b80fd5b513d84823e3d90fd5b8680fd5b6084908386519162461bcd60e51b8352820152602660248201527f4f7065726174696f6e206572726f723a2063616e6e6f7420726573746172742060448201527f706f636b657400000000000000000000000000000000000000000000000000006064820152fd5b6103da9150843d86116103e0575b6103d281836125be565b810190612a34565b89610294565b503d6103c8565b86513d8a823e3d90fd5b8480fd5b8380fd5b83346103425761019661040b36612460565b612835565b80918434610757576003199181833601126107525780359267ffffffffffffffff84116103f157610200908483019436030112610752576104716024359361045d600260655414156129e9565b600260655561046b81612835565b806125f8565b93610481600260655414156129e9565b60026065556001600160a01b03918260fb541691855192624418eb60e81b84526020938481806104b5338d898d8501612a4c565b0381855afa9081156106d7576104fe92916104d7918c91610735575b50612b5c565b888851809263381635c960e21b8252878a83015281806101c096879560248301908b61271e565b03915afa9182156106d757908692918b926106fe575b5050169186517f23b872dd000000000000000000000000000000000000000000000000000000008152338782015230602482015282604482015284816064818d885af19081156106d7579061056f918b916106e15750612b5c565b6105a884838760fc54168a51938492839263095ea7b360e01b84528c8401602090939291936001600160a01b0360408201951681520152565b03818d885af180156106d757906105d692916106ba575b508751986105cc8a612540565b338a523691612647565b838801528587015260608601528160fc541690813b1561034e57869085519283916322da9c3160e21b835286830152818381610615602482018c612c96565b03925af180156106b05790869161069c575b505060fb541692833b156103f15761066e9385928385518097819582947f99ba80570000000000000000000000000000000000000000000000000000000084528301612cd5565b03925af19081156103455750610688575b50600160655580f35b61069190612572565b61034257808261067f565b6106a590612572565b6103f1578487610627565b84513d88823e3d90fd5b6106d090863d88116103e0576103d281836125be565b508b6105bf565b88513d8c823e3d90fd5b6106f89150863d88116103e0576103d281836125be565b8c6104d1565b61071d9250803d1061072e575b61071581836125be565b810190612bed565b505050505050505090508b80610514565b503d61070b565b61074c9150873d89116103e0576103d281836125be565b8d6104d1565b505050fd5b5050fd5b8383346101555760209060031982813601126103f557843567ffffffffffffffff81116103f15761078f90369087016123c8565b9390956001600160a01b0360fb54169084517fe6068d010000000000000000000000000000000000000000000000000000000081528381806107d68c8b3391888501612a4c565b0381865afa9081156103e75788916108cb575b501561087d5761080087988651976102ab896125a2565b83870152600385870152813b1561034e57868581957f555345525f434c4f5345445f504f434b45540000000000000000000000000000829661085984519b8c998a9863384e1a0960e21b8a528901526044880190612b1f565b868103938401602488015260128152015201925af190811561034557506103325750f35b6084908386519162461bcd60e51b83528201526024808201527f4f7065726174696f6e206572726f723a2063616e6e6f7420636c6f736520706f60448201526318dad95d60e21b6064820152fd5b6108e29150843d86116103e0576103d281836125be565b896107e9565b82843461034257600319916020368401811361020257843567ffffffffffffffff81116103f55761091c90369087016123c8565b949061092d600260655414156129e9565b60026065556001600160a01b03968760fb54169785519863983d273760e01b8a52858a8481845afa998a15610e6e57889a610e78575b508651632474521560e21b81528381019a8b523360208c01529986908b9081906040010381845afa998a15610e6e57899a6109a7918a9b9a91610e51575b50612a74565b85875180927fc11bc90f0000000000000000000000000000000000000000000000000000000082528286830152818060249e8f82016109e6918b61271e565b03915afa908115610dc3578991610e34575b5015610dcd57978886610a458a9b60fc54168a83519d8e809481937f6afd431a0000000000000000000000000000000000000000000000000000000083528d8b840152898301908c61271e565b03925af18015610dc357899a8a91610d90575b508160fb54169080888d8c610a998d5194859384937f125167ef0000000000000000000000000000000000000000000000000000000085528d8d8601612afb565b0381865afa908115610d86578c91610d69575b5015610d02578a9b895192610ac084612540565b338452610ace368d8a612647565b928a85019384528b850192835260608501908152813b15610cfe578d8c8b8d82968c9585998c86519c8d9b8c9a7f368e0b6c000000000000000000000000000000000000000000000000000000008c528b01525116604489015251606488016080905260c48801610b3e91612420565b915160848801525160a48701528581039283018c870152601e8152017f4f50455241544f525f555044415445445f54524144494e475f53544154530000905201925af180156106d757908a91610ce6575b505060fb54169286517f534ca7a20000000000000000000000000000000000000000000000000000000081528684820152868180610bd08682018d8761271e565b0381885afa9081156106d7578a91610cc9575b50610bf2575b88600160655580f35b610c02908751986105cc8a6125a2565b85880152600386880152823b15610cc557606086947f4f505f434f4e444954494f4e5300000000000000000000000000000000000000868b98947f4f50455241544f525f434c4f5345445f504f434b45545f4455455f544f5f53548a96610c8084519e8f9c8d9b63384e1a0960e21b8d528c015260448b0190612b1f565b92898403968701908a0152602d8352820152015201925af19081156103455750610cb1575b80808080808080610be9565b610cba90612572565b610342578082610ca5565b8780fd5b610ce09150873d89116103e0576103d281836125be565b8b610be3565b610cef90612572565b610cfa57888b610b8f565b8880fd5b8d80fd5b608485602d868b8d519362461bcd60e51b85528401528201527f4f7065726174696f6e206572726f723a2062757920636f6e646974696f6e206460448201527f6f6573206e6f74207265616368000000000000000000000000000000000000006064820152fd5b610d809150893d8b116103e0576103d281836125be565b8d610aac565b8a513d8e823e3d90fd5b9050610db3919a50873d8911610dbc575b610dab81836125be565b810190612ae5565b9990998b610a58565b503d610da1565b87513d8b823e3d90fd5b60848260388b888a519362461bcd60e51b85528401528201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f7420726561647920746f20706572666f726d207377617000000000000000006064820152fd5b610e4b9150863d88116103e0576103d281836125be565b8a6109f8565b610e689150883d8a116103e0576103d281836125be565b8c6109a1565b87513d8a823e3d90fd5b9950858a813d8311610ea5575b610e8f81836125be565b81010312610ea05798519885610963565b600080fd5b503d610e85565b8383610ec9610eba36612460565b61045d600260655414156129e9565b919093610edb600260655414156129e9565b600260655534156110c55783946001600160a01b03908160fb541690845191624418eb60e81b8352602092838180610f17338c888c8501612a4c565b0381855afa908115610dc35790610f34918a916110a85750612b5c565b8551809163381635c960e21b825284878301526101c09283918180610f5e8d60248301908a61271e565b03915afa918215610dc357908592918a92611081575b50501690813b15610cc55785517fd0e30db00000000000000000000000000000000000000000000000000000000081528881878134875af18015610dc35790899161106d575b505060fc54865163095ea7b360e01b81529085166001600160a01b031686820190815234602082015284908290819060400103818c875af18015610dc357906110109291611050575b508651976102ab89612540565b82870152348587015260608601528160fc541690813b1561034e57869085519283916322da9c3160e21b835286830152818381610615602482018c612c96565b61106690853d87116103e0576103d281836125be565b508a611003565b61107690612572565b610cc557878a610fba565b6110979250803d1061072e5761071581836125be565b505050505050505090508a80610f74565b6110bf9150853d87116103e0576103d281836125be565b8b6104d1565b6020606492519162461bcd60e51b8352820152601f60248201527f4f7065726174696f6e206572726f723a20696e76616c696420616d6f756e74006044820152fd5b83833461015557602090816003193601126102025783359167ffffffffffffffff8084116103f157366023850112156103f157838601359081116103f157602490818501966005973684848b1b89010111610cc55761116983989695986125e0565b96611176865198896125be565b838852601f19611185856125e0565b01875b818110611357575050865b8a8582106111f45787518b81528a51818d018190528a9281901b82018a01908c8e01908e848d015b8287106111c85785850386f35b9091929382806111e4600193603f198a82030186528851612420565b96019201960195929190926111bb565b61120b8783611212939d9a9b9d1b850101856125f8565b3691612647565b303b156112f0578a80828a6112ac94519101305af43d156112e9573d6112378161262b565b906112448c5192836125be565b81523d8d8b83013e5b8a5191611259836125a2565b602783527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c8b8401527f206661696c6564000000000000000000000000000000000000000000000000008c8401526126a8565b6112b6828b61267e565b526112c1818a61267e565b5060001981146112d75760010198969598611193565b858a601186634e487b7160e01b835252fd5b606061124d565b6084856026898b8d519362461bcd60e51b85528401528201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e747261637400000000000000000000000000000000000000000000000000006064820152fd5b60608a82018c01528a01611188565b505034610155576020366003190112610155576001600160a01b036113896123f6565b611391612493565b16908173ffffffffffffffffffffffffffffffffffffffff1960fb54161760fb55519081527f482b97c53e48ffa324a976e2738053e9aff6eee04d8aac63b10e19411d869b8260203392a280f35b5050346101555781600319360112610155576020906001600160a01b03609754169051908152f35b905034610202578260031936011261020257611421612493565b6033549060ff8216611465575060ff1916600117603355513381527f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25890602090a180f35b606490602084519162461bcd60e51b8352820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152fd5b905034610202578260031936011261020257825460ff8160081c161591828093611623575b801561160c575b156115a3575060ff1980821660011785556115209183611592575b5060ff855460081c169061150282612d44565b61150b82612d44565b6033541660335561151b81612d44565b612d44565b611529336124eb565b82549061155260ff8360081c1661153f81612d44565b61154881612d44565b6001606555612d44565b61155a578280f35b61ff001916825551600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a138808280f35b61ffff1916610101178555386114ef565b608490602085519162461bcd60e51b8352820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152fd5b50303b1580156114d45750600160ff8316146114d4565b50600160ff8316106114cd565b8383346101555760209060031982813601126103f557843567ffffffffffffffff81116103f15761166490369087016123c8565b9390956001600160a01b0360fb54169084517f9d92d7370000000000000000000000000000000000000000000000000000000081528381806116ab8c8b3391888501612a4c565b0381865afa9081156103e757889161177c575b501561172e576116d587988651976102ab896125a2565b83870152600285870152813b1561034e57868581957f555345525f5041555345445f504f434b45540000000000000000000000000000829661085984519b8c998a9863384e1a0960e21b8a528901526044880190612b1f565b6084908386519162461bcd60e51b83528201526024808201527f4f7065726174696f6e206572726f723a2063616e6e6f7420706175736520706f60448201526318dad95d60e21b6064820152fd5b6117939150843d86116103e0576103d281836125be565b896116be565b5050346101555781600319360112610155576020906001600160a01b0360fb54169051908152f35b8391506020928360031936011261020257813567ffffffffffffffff81116103f5576117f090369084016123c8565b9290611801600260655414156129e9565b600260655534156118385784956001600160a01b03918260fb54168551624418eb60e81b8152838180610f17338c888c8501612a4c565b5084606492519162461bcd60e51b8352820152601f60248201527f4f7065726174696f6e206572726f723a20696e76616c696420616d6f756e74006044820152fd5b8334610342578060031936011261034257611893612493565b60006001600160a01b0360975473ffffffffffffffffffffffffffffffffffffffff198116609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505034610155576020366003190112610155576001600160a01b036119066123f6565b61190e612493565b16908173ffffffffffffffffffffffffffffffffffffffff1960fc54161760fc55519081527f483bdedaaf23706a9800ac1af0d852b34927780d79f9d6ba60a80c7cad75ea3960203392a280f35b839150346101555760209260031984813601126103f55782359467ffffffffffffffff86116103f15785840195610180948584833603011261034e576001600160a01b0360fb5416916119e7846119b38b806125f8565b895193849283927fb612f8660000000000000000000000000000000000000000000000000000000084523391898501612a4c565b0381875afa908115610dc3578991611b82575b5015611b1a578798833b15610cfa57889587958793879384519b8c998a987f3740c183000000000000000000000000000000000000000000000000000000008a52890152611a4882806126ec565b909160448a01526101c4890190611a5e9261271e565b90602483013560648901526044830135608489015260648301611a809161273f565b8883036043190160a48a0152611a969291612794565b608482013560c488015290611ab160e4880160a483016127f0565b610144611ac48882016101048401612813565b611ad49161018489019101612813565b858103928301602487015260128152017f555345525f5550444154455f504f434b45540000000000000000000000000000905201925af190811561034557506103325750f35b6084828588519162461bcd60e51b8352820152603160248201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f742061626c6520746f207570646174650000000000000000000000000000006064820152fd5b611b999150853d87116103e0576103d281836125be565b8a6119fa565b50503461015557816003193601126101555760209060ff6033541690519015158152f35b905034610202578260031936011261020257611bdd612493565b6033549060ff821615611c1f575060ff1916603355513381527f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa90602090a180f35b606490602084519162461bcd60e51b8352820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152fd5b80918434610757578060031936011261075757813567ffffffffffffffff811161075257611c9390369084016123c8565b9290602435610481600260655414156129e9565b8383346101555760209060031982813601126103f557843567ffffffffffffffff81116103f157611cdb90369087016123c8565b939095611ced600260655414156129e9565b60026065556001600160a01b03611d3983898360fb5416885180809581947f7bc039400000000000000000000000000000000000000000000000000000000083528d33918b8501612a4c565b03915afa9081156103e7578891611ed7575b5015611e6f57611d6287988651976102ab89612586565b838701528060fc5416803b15610cc55787865180927f61a45ae60000000000000000000000000000000000000000000000000000000082528686830152818381611db08d6024830190612d1e565b03925af180156103e757908891611e5b575b505060fb541690813b1561034e57868581957f555345525f57495448445245575f46554e4400000000000000000000000000008296611e3184519b8c998a987fbcf7a122000000000000000000000000000000000000000000000000000000008a528901526044880190612d1e565b868103938401602488015260128152015201925af190811561034557506106885750600160655580f35b611e6490612572565b61034e578689611dc2565b5060849184519162461bcd60e51b8352820152602c60248201527f4f7065726174696f6e206572726f723a2063616e6e6f7420776974686472617760448201527f20706f636b65742066756e6400000000000000000000000000000000000000006064820152fd5b611eee9150843d86116103e0576103d281836125be565b89611d4b565b8383346101555760209060031982813601126103f557843567ffffffffffffffff81116103f157611f2890369087016123c8565b939095611f3a600260655414156129e9565b60026065556001600160a01b03928360fb5416855163983d273760e01b815284818581855afa8015610dc35785908a90612399575b8851632474521560e21b81528681019182523360208301529250829081906040015b0381855afa908115610dc357611fee92611fb487938d938d9161237c5750612a74565b885180809581947fb3fd1da5000000000000000000000000000000000000000000000000000000008352868a8401528d602484019161271e565b03915afa9081156103e757889161235f575b50156122f75761204d9085898660fc5416898b84518097819582947f9c89bb3d0000000000000000000000000000000000000000000000000000000084528c8c850152602484019161271e565b03925af19485156103e757889289966122d2575b508060fb54169483818a8d6120a28b8d5195869485947fd3fc80d90000000000000000000000000000000000000000000000000000000086528d8601612afb565b03818a5afa9081156122ab578b916122b5575b50801561223a575b156121d2576120d68a9b899a9b99519b61120b8d612540565b8a52808a0190338252898b0194855260608b01978852863b15610cfa5789978995899485519d8e9b8c9a7fb48093e1000000000000000000000000000000000000000000000000000000008c528b01525160448a016080905260c48a0161213c91612420565b94511660648901525160848801525160a487015285820393840160248701526027825281017f4f50455241544f525f555044415445445f434c4f53494e475f504f534954494f9052017f4e5f5354415453000000000000000000000000000000000000000000000000009052606001925af190811561034557506121c35750600160655580f35b6121cc90612572565b8161067f565b8460849189519162461bcd60e51b8352820152603a60248201527f4f7065726174696f6e206572726f723a20636c6f73696e6720706f736974696f60448201527f6e20636f6e646974696f6e20646f6573206e6f742072656163680000000000006064820152fd5b5083818a8d6122758b8d5195869485947f1416642e0000000000000000000000000000000000000000000000000000000086528d8601612afb565b03818a5afa9081156122ab578b9161228e575b506120bd565b6122a59150823d84116103e0576103d281836125be565b8c612288565b89513d8d823e3d90fd5b6122cc9150823d84116103e0576103d281836125be565b8c6120b5565b9095506122ed919250863d8811610dbc57610dab81836125be565b919091948a612061565b5060849184519162461bcd60e51b8352820152603a60248201527f4f7065726174696f6e206572726f723a2074686520706f636b6574206973206e60448201527f6f7420726561647920746f20636c6f736520706f736974696f6e0000000000006064820152fd5b6123769150843d86116103e0576103d281836125be565b89612000565b6123939150853d87116103e0576103d281836125be565b8e6109a1565b5081813d83116123c1575b6123ae81836125be565b81010312610cfa5784611f919151611f6f565b503d6123a4565b9181601f84011215610ea05782359167ffffffffffffffff8311610ea05760208381860195010111610ea057565b600435906001600160a01b0382168203610ea057565b35906001600160a01b0382168203610ea057565b919082519283825260005b84811061244c575050826000602080949584010152601f8019910116010190565b60208183018101518483018201520161242b565b60031990602081830112610ea0576004359167ffffffffffffffff8311610ea0578261020092030112610ea05760040190565b6001600160a01b036097541633036124a757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b609754906001600160a01b03809116918273ffffffffffffffffffffffffffffffffffffffff19821617609755167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b6080810190811067ffffffffffffffff82111761255c57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161255c57604052565b6040810190811067ffffffffffffffff82111761255c57604052565b6060810190811067ffffffffffffffff82111761255c57604052565b90601f8019910116810190811067ffffffffffffffff82111761255c57604052565b67ffffffffffffffff811161255c5760051b60200190565b903590601e1981360301821215610ea0570180359067ffffffffffffffff8211610ea057602001918136038313610ea057565b67ffffffffffffffff811161255c57601f01601f191660200190565b9291926126538261262b565b9161266160405193846125be565b829481845281830111610ea0578281602093846000960137010152565b80518210156126925760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b909190156126b4575090565b8151156126c45750805190602001fd5b6126e89060405191829162461bcd60e51b8352602060048401526024830190612420565b0390fd5b9035601e1982360301811215610ea057016020813591019167ffffffffffffffff8211610ea0578136038313610ea057565b908060209392818452848401376000828201840152601f01601f1916010190565b9035601e1982360301811215610ea057016020813591019167ffffffffffffffff8211610ea0578160061b36038313610ea057565b6004111561277e57565b634e487b7160e01b600052602160045260246000fd5b918181526020809101929160009182905b8282106127b457505050505090565b9091929394853581528186013560048110156127ec5790816127d7600193612774565b818401526040908101960194939201906127a5565b8580fd5b60409080358352602081013560208401520135906007821015610ea05760400152565b80356004811015610ea0576020918161282c8493612774565b84520135910152565b602081019081356001600160a01b0390818116809103610ea05733036129a5578060fb5416803b15610ea05761297d93600061293d938195604051978896879586947fe92c359800000000000000000000000000000000000000000000000000000000865260206004870152806128cb6128c56128b288806126ec565b61020060248c01526102248b019161271e565b9361240c565b166044870152806128de6040870161240c565b166064870152806128f16060870161240c565b1660848701526129036080860161240c565b1660a486015260a084013560c486015260c084013560e486015261292a60e085018561273f565b8683036023190161010488015290612794565b9161010081013561012485015261295c610144850161012083016127f0565b61296e6101a485016101808301612813565b6101c06101e485019101612813565b03925af180156129995761298e5750565b61299790612572565b565b6040513d6000823e3d90fd5b606460405162461bcd60e51b815260206004820152602060248201527f496e76616c696420706f636b65743a206f776e6572206d69736d6174636865736044820152fd5b156129f057565b606460405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152fd5b90816020910312610ea057518015158103610ea05790565b91612a6d6020926001600160a01b039296959660408652604086019161271e565b9416910152565b15612a7b57565b608460405162461bcd60e51b815260206004820152603d60248201527f4f7065726174696f6e206572726f723a206f6e6c79206f70657261746f72206960448201527f73207065726d697474656420666f7220746865206f7065726174696f6e0000006064820152fd5b9190826040910312610ea0576020825192015190565b90612b15906040939695949660608452606084019161271e565b9460208201520152565b906001600160a01b0382511681526040612b486020840151606060208501526060840190612420565b92015190600582101561277e576040015290565b15612b6357565b606460405162461bcd60e51b815260206004820152601f60248201527f4f7065726174696f6e206572726f723a2063616e6e6f74206465706f736974006044820152fd5b51906001600160a01b0382168203610ea057565b9190826040910312610ea057604051612bd381612586565b809280516004811015610ea0578252602090810151910152565b9190828103906101c08212610ea057612c0584612ba7565b93612c1260208201612ba7565b93612c1f60408301612ba7565b9360608301519360808401519360a081015193606060c08301519460df190112610ea057604051612c4f816125a2565b60e083015181526101008301516020820152610120830151906007821015610ea057612c9391604082015293610180612c8c826101408701612bbb565b9401612bbb565b90565b9060606001600160a01b0380845116835281612cc16020860151608060208701526080860190612420565b946040810151604086015201511691015290565b612ce760409283835283830190612c96565b906020818303910152601381527f555345525f4445504f53495445445f46554e440000000000000000000000000060208201520190565b9060406020612c93936001600160a01b0381511684520151918160208201520190612420565b15612d4b57565b608460405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152fdfea264697066735822122097abda4b925eeec262f6466be43fa1da30f26bebe9676e058c8c1a27d37b44d464736f6c63430008130033";

type PocketChefConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PocketChefConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PocketChef__factory extends ContractFactory {
  constructor(...args: PocketChefConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<PocketChef> {
    return super.deploy(overrides || {}) as Promise<PocketChef>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PocketChef {
    return super.attach(address) as PocketChef;
  }
  override connect(signer: Signer): PocketChef__factory {
    return super.connect(signer) as PocketChef__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PocketChefInterface {
    return new utils.Interface(_abi) as PocketChefInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PocketChef {
    return new Contract(address, _abi, signerOrProvider) as PocketChef;
  }
}
