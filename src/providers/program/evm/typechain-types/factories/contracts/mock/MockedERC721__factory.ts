/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  MockedERC721,
  MockedERC721Interface,
} from "../../../contracts/mock/MockedERC721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x6080346200035d576001600160401b039060408181018381118382101762000347578152600c82526020916b4d6f636b656445524337323160a01b83820152815193828501858110828211176200034757835260078552664d45524337323160c81b84860152815181811162000347576000948554916001948584811c941680156200033c575b8385101462000328578190601f94858111620002d5575b5083908583116001146200027157899262000265575b5050600019600383901b1c191690851b1786555b8651928311620002515783548481811c9116801562000246575b828210146200023257828111620001ea575b50809183116001146200018357508495829394959262000177575b5050600019600383901b1c191690821b1790555b60068054336001600160a01b03198216811790925591519290916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a3611b669081620003638239f35b0151905038806200010e565b90601f198316968487528287209287905b898210620001d2575050838596979810620001b8575b505050811b01905562000122565b015160001960f88460031b161c19169055388080620001aa565b80878596829496860151815501950193019062000194565b8487528187208380860160051c82019284871062000228575b0160051c019085905b8281106200021c575050620000f3565b8881550185906200020c565b9250819262000203565b634e487b7160e01b87526022600452602487fd5b90607f1690620000e1565b634e487b7160e01b86526041600452602486fd5b015190503880620000b3565b898052848a208894509190601f1984168b5b87828210620002be5750508411620002a4575b505050811b018655620000c7565b015160001960f88460031b161c1916905538808062000296565b8385015186558b9790950194938401930162000283565b9091508880528389208580850160051c8201928686106200031e575b918991869594930160051c01915b8281106200030f5750506200009d565b8b8155859450899101620002ff565b92508192620002f1565b634e487b7160e01b88526022600452602488fd5b93607f169362000086565b634e487b7160e01b600052604160045260246000fd5b600080fdfe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714610ecd5750806306fdde0314610de4578063081812fc14610d91578063095ea7b314610b9357806323b872dd14610b6e57806342842e0e14610b3a5780636352211e14610adf57806370a08231146109f0578063715018a6146109525780638da5cb5b146108ff57806395d89b41146107a3578063a144819414610597578063a22cb46514610465578063b88d4fde14610394578063c87b56dd14610296578063e985e9c5146102195763f2fde38b146100de57600080fd5b346102155760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021557610115611021565b9061011e6111ae565b73ffffffffffffffffffffffffffffffffffffffff809216928315610192575050600654827fffffffffffffffffffffffff0000000000000000000000000000000000000000821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b90602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8280fd5b50503461029257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102925760ff81602093610257611021565b61025f611049565b73ffffffffffffffffffffffffffffffffffffffff91821683526005875283832091168252855220549151911615158152f35b5080fd5b5082903461029257602091827ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610391575061035e9261037e8361038d933561030d61030882600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b61122d565b83519061031982611117565b6013825261034c838301917f68747470733a2f2f676f6f676c652e636f6d2f000000000000000000000000008352611979565b90855198899351809286860190610fbb565b820161037282518093868085019101610fbb565b01038087520185611133565b51928284938452830190610fde565b0390f35b80fd5b5090346102155760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610215576103cd611021565b906103d6611049565b604435906064359467ffffffffffffffff86116104615736602387011215610461578501359361041161040886611174565b94519485611133565b8484528636602487890101116103915760208661045997602461045e9a0183890137860101526104496104448433611432565b61131b565b6104548383836114ad565b6118ed565b6113a6565b80f35b8680fd5b50903461021557807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102155761049d611021565b90602435918215158093036105935773ffffffffffffffffffffffffffffffffffffffff1692833314610537575033845260056020528084208385526020528084207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0081541660ff8416179055519081527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3160203392a380f35b602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152fd5b8480fd5b5091903461029257807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610292576105d0611021565b602435906105dc6111ae565b8251926105e8846110cc565b84845273ffffffffffffffffffffffffffffffffffffffff82169081156107465761063684600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b6106ea578186526003602052808620805490600182018092116106be57558386526002602052852080547fffffffffffffffffffffffff0000000000000000000000000000000000000000168217905561045e9361045993909290918290877fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8180a461170f565b60248860118b7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b517f08c379a0000000000000000000000000000000000000000000000000000000008152602081880152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606490fd5b86602060649251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602060248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152fd5b50913461039157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610391578151918160019283549384811c918186169586156108f5575b60209687851081146108c9578899509688969785829a529182600014610884575050600114610829575b50505061038d929161037e910385611133565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b82841061086c575050508201018161037e61038d610816565b8054848a018601528895508794909301928101610853565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168782015293151560051b8601909301935084925061037e915061038d9050610816565b60248360228c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b92607f16926107ec565b50503461029257817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102925760209073ffffffffffffffffffffffffffffffffffffffff600654169051908152f35b833461039157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610391576109896111ae565b8073ffffffffffffffffffffffffffffffffffffffff6006547fffffffffffffffffffffffff00000000000000000000000000000000000000008116600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b508290346102925760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102925773ffffffffffffffffffffffffffffffffffffffff610a3f611021565b16908115610a5c5760208480858581526003845220549051908152f35b60849060208551917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f74206120766160448201527f6c6964206f776e657200000000000000000000000000000000000000000000006064820152fd5b5091346103915760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610391575073ffffffffffffffffffffffffffffffffffffffff610b3260209335611292565b915191168152f35b5050346102925761045961045e91610b513661106c565b91925192610b5e846110cc565b8684526104496104448433611432565b83346103915761045e610b803661106c565b91610b8e6104448433611432565b6114ad565b503461021557817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021557610bca611021565b906024359273ffffffffffffffffffffffffffffffffffffffff918280610bf087611292565b16941693808514610d0e57803314908115610cef575b5015610c6d578486526020528420827fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055610c4583611292565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258480a480f35b602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152603e60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c00006064820152fd5b90508652600560205281862033875260205260ff828720541638610c06565b50602060849251917f08c379a0000000000000000000000000000000000000000000000000000000008352820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560448201527f72000000000000000000000000000000000000000000000000000000000000006064820152fd5b5091346103915760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610391575073ffffffffffffffffffffffffffffffffffffffff610b32602093356112c4565b50913461039157807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103915781519181825492600184811c91818616958615610ec3575b60209687851081146108c9578899509688969785829a529182600014610884575050600114610e685750505061038d929161037e910385611133565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610eab575050508201018161037e61038d610816565b8054848a018601528895508794909301928101610e92565b92607f1692610e2c565b925050346102155760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261021557357fffffffff00000000000000000000000000000000000000000000000000000000811680910361021557602092507f80ac58cd000000000000000000000000000000000000000000000000000000008114908115610f91575b8115610f67575b5015158152f35b7f01ffc9a70000000000000000000000000000000000000000000000000000000091501438610f60565b7f5b5e139f0000000000000000000000000000000000000000000000000000000081149150610f59565b60005b838110610fce5750506000910152565b8181015183820152602001610fbe565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361101a81518092818752878088019101610fbb565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361104457565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361104457565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc60609101126110445773ffffffffffffffffffffffffffffffffffffffff90600435828116810361104457916024359081168103611044579060443590565b6020810190811067ffffffffffffffff8211176110e857604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff8211176110e857604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176110e857604052565b67ffffffffffffffff81116110e857601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b73ffffffffffffffffffffffffffffffffffffffff6006541633036111cf57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b1561123457565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152fd5b600052600260205273ffffffffffffffffffffffffffffffffffffffff604060002054166112c181151561122d565b90565b6112f461030882600052600260205273ffffffffffffffffffffffffffffffffffffffff60406000205416151590565b600052600460205273ffffffffffffffffffffffffffffffffffffffff6040600020541690565b1561132257565b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201527f72206e6f7220617070726f7665640000000000000000000000000000000000006064820152fd5b156113ad57565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b9073ffffffffffffffffffffffffffffffffffffffff808061145384611292565b16931691838314938415611486575b508315611470575b50505090565b61147c919293506112c4565b161438808061146a565b909350600052600560205260406000208260005260205260ff604060002054169238611462565b6114b683611292565b9173ffffffffffffffffffffffffffffffffffffffff9283809316928391160361168b578216918215611608576000908482526004602052848260408120927fffffffffffffffffffffffff00000000000000000000000000000000000000009384815416905561152683611292565b167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258280a48282526003602052604082208054907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82019182116115db5755838252600360205260408220805490600182018092116115db57558482526002602052604082208054909116841790557fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9080a4565b6024847f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b60846040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f2061646460448201527f72657373000000000000000000000000000000000000000000000000000000006064820152fd5b60846040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152fd5b9192600092909190803b156118e35761178b9460405180927f150b7a020000000000000000000000000000000000000000000000000000000094858352336004840152876024840152604483015260806064830152818773ffffffffffffffffffffffffffffffffffffffff8260209b8c976084830190610fde565b0393165af184918161188b575b50611862575050503d60001461185a573d6117b281611174565b906117c06040519283611133565b81528091833d92013e5b80519182611857576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527f63656976657220696d706c656d656e74657200000000000000000000000000006064820152608490fd5b01fd5b5060606117ca565b7fffffffff00000000000000000000000000000000000000000000000000000000161492509050565b9091508581813d83116118dc575b6118a38183611133565b8101031261059357517fffffffff0000000000000000000000000000000000000000000000000000000081168103610593579038611798565b503d611899565b5050915050600190565b9293600093909291803b1561196e5794849161178b96604051809481937f150b7a02000000000000000000000000000000000000000000000000000000009788845233600485015273ffffffffffffffffffffffffffffffffffffffff80921660248501526044840152608060648401528260209b8c976084830190610fde565b505050915050600190565b8015611af65780816000925b611abe575061199382611174565b916119a16040519384611133565b8083527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06119ce82611174565b01908260209236848701375b6119e45750505090565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8101908111611a8f578092600a9160308383068101809111611a8f578651821015611a605760f81b7fff000000000000000000000000000000000000000000000000000000000000001660001a9086018401530491826119da565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b90917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114611a8f576001019190600a900480611985565b50604051611b0381611117565b600181527f300000000000000000000000000000000000000000000000000000000000000060208201529056fea2646970667358221220c472ff2cc1c81723a3a09562753d7910e428f065ee570a6409569ea287550cd664736f6c63430008130033";

type MockedERC721ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockedERC721ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockedERC721__factory extends ContractFactory {
  constructor(...args: MockedERC721ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<MockedERC721> {
    return super.deploy(overrides || {}) as Promise<MockedERC721>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockedERC721 {
    return super.attach(address) as MockedERC721;
  }
  override connect(signer: Signer): MockedERC721__factory {
    return super.connect(signer) as MockedERC721__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockedERC721Interface {
    return new utils.Interface(_abi) as MockedERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockedERC721 {
    return new Contract(address, _abi, signerOrProvider) as MockedERC721;
  }
}
