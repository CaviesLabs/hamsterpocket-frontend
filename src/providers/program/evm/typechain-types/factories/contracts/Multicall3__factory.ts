/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../contracts/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001657610e4d908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610117578063174dea7114610112578063252dba421461010d57806327e86d6e146101085780633408e47014610103578063399542e9146100fe5780633e64a696146100f957806342cbb15c146100f45780634d2301cc146100ef57806372425d9d146100ea57806382ad56cb146100e557806386d516e8146100e0578063a8b0574e146100db578063bce38bd7146100d6578063c3077fa9146100d15763ee82ac5e146100cc57600080fd5b61099f565b610905565b6108e2565b6108a9565b610870565b610786565b61074d565b610707565b6106b0565b610677565b610653565b6105a7565b61054b565b61046c565b6102d3565b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051428152f35b600080fd5b9181601f840112156101505782359167ffffffffffffffff8311610150576020808501948460051b01011161015057565b60207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc820112610150576004359067ffffffffffffffff8211610150576101cf91600401610155565b9091565b919082519283825260005b84811061021d5750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8460006020809697860101520116010190565b6020818301810151848301820152016101de565b908082519081815260208091019281808460051b8301019501936000915b84831061025f5750505050505090565b90919293949584806102af837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08660019603018752828b51805115158352015190604090818582015201906101d3565b980193019301919493929061024f565b9060206102d0928181520190610231565b90565b6102dc36610186565b60006102e782610c1b565b91815b8181106103105761030c84610300853414610db2565b604051918291826102bf565b0390f35b61031a8185610ba2565b51610326828488610d72565b600080604061035a818501358099019861033f86610adf565b9261034d6060880188610ae9565b9390915180948193610b3a565b03925af191610367610b48565b9061037c602094859384840152829015159052565b51910135171561038f57506001016102ea565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b8483106104205750505050505090565b909192939495848061045c837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa086600196030187528a516101d3565b9801930193019194939290610410565b61047536610186565b9061048761048283610a53565b610a0a565b918083527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe06104b582610a53565b0160005b81811061053a57505060005b8181106104db576040518061030c8643836103e5565b806105346000806104ef6001958789610a9a565b816105076104fc83610adf565b926020810190610ae9565b919061051860405180948193610b3a565b03925af1610524610b48565b61052e8489610ba2565b52610bb6565b016104c5565b8060606020809388010152016104b9565b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101505760206040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4301408152f35b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051468152f35b9060407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc83011261015057600435801515810361015057916024359067ffffffffffffffff8211610150576101cf91600401610155565b6102d09392606092825260208201528160408201520190610231565b61030c610668610662366105e0565b91610c9c565b60405191829143404384610637565b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051488152f35b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051438152f35b73ffffffffffffffffffffffffffffffffffffffff81160361015057565b346101505760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020600435610744816106e9565b31604051908152f35b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051448152f35b61078f36610186565b61079881610c1b565b9060005b8181106107b1576040518061030c85826102bf565b6107bb8184610ba2565b516107c7828487610d32565b6000806107d383610adf565b6107e582604061034d81880188610ae9565b03925af1916107f2610b48565b90610807602094859384840152829015159052565b51910135171561081a575060010161079c565b7f08c379a00000000000000000000000000000000000000000000000000000000060005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051458152f35b346101505760007ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051418152f35b61030c6108f1610662366105e0565b604051918291602083526020830190610231565b61090e36610186565b61091781610c1b565b9160005b828110610934576040518061030c864380409084610637565b8061099961094460019387610ba2565b51610950838787610a9a565b600080823561095e816106e9565b8161096e60209586810190610ae9565b9190826040519384928337810182815203925af19061098b610b48565b908301521515809152610bb6565b0161091b565b346101505760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610150576020604051600435408152f35b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff821117610a4e57604052565b6109db565b67ffffffffffffffff8111610a4e5760051b60200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9190811015610ada5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc181360301821215610150570190565b610a6b565b356102d0816106e9565b9035907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe181360301821215610150570180359067ffffffffffffffff82116101505760200191813603831361015057565b908092918237016000815290565b3d15610b9d573d9067ffffffffffffffff8211610a4e57610b9060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601610a0a565b9182523d6000602084013e565b606090565b8051821015610ada5760209160051b010190565b15610bbd57565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c65640000000000000000006044820152fd5b90610c2861048283610a53565b8281527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0610c568294610a53565b016000805b828110610c685750505050565b604090815182810181811067ffffffffffffffff821117610a4e576020935283815282606081830152828701015201610c5b565b929190610ca882610c1b565b9360005b838110610cb95750505050565b80610cc660019288610ba2565b5183610cd3838888610a9a565b6000808235610ce1816106e9565b81610cf160209586810190610ae9565b9190826040519384928337810182815203925af190610d0e610b48565b908401521515809252610d23575b5001610cac565b610d2c90610bb6565b38610d1c565b9190811015610ada5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa181360301821215610150570190565b9190811015610ada5760051b810135907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8181360301821215610150570190565b15610db957565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152fdfea2646970667358221220716779dc556961ebaeaf58a58d5ffb5325e046652b2814b0db52271a18a57f8b64736f6c63430008130033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
