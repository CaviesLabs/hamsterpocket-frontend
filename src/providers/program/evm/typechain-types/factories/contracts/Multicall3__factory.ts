/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Multicall3,
  Multicall3Interface,
} from "../../contracts/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x6080806040523461001657610ae4908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c80630f28c97d14610117578063174dea7114610112578063252dba421461010d57806327e86d6e146101085780633408e47014610103578063399542e9146100fe5780633e64a696146100f957806342cbb15c146100f45780634d2301cc146100ef57806372425d9d146100ea57806382ad56cb146100e557806386d516e8146100e0578063a8b0574e146100db578063bce38bd7146100d6578063c3077fa9146100d15763ee82ac5e146100cc57600080fd5b61078b565b6106f1565b6106ce565b6106b3565b610698565b6105c8565b6105ad565b610585565b61054c565b610531565b61050d565b61049d565b61047d565b6103bc565b61025b565b34610132576000366003190112610132576020604051428152f35b600080fd5b9181601f840112156101325782359167ffffffffffffffff8311610132576020808501948460051b01011161013257565b6020600319820112610132576004359067ffffffffffffffff82116101325761019391600401610137565b9091565b919082519283825260005b8481106101c3575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016101a2565b908082519081815260208091019281808460051b8301019501936000915b8483106102055750505050505090565b9091929394958480610237600193601f19868203018752828b5180511515835201519060409081858201520190610197565b98019301930191949392906101f5565b9060206102589281815201906101d7565b90565b61026436610168565b600061026f82610925565b91815b8181106102985761029484610288853414610a63565b60405191829182610247565b0390f35b6102a281856108c6565b516102ae828488610a41565b60008060406102e281850135809901986102c78661083f565b926102d56060880188610849565b939091518094819361087c565b03925af1916102ef61088a565b90610304602094859384840152829015159052565b5191013517156103175750600101610272565b62461bcd60e51b60005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260846000fd5b90604082019082526020604081840152835180925260608301928160608460051b8301019501936000915b84831061038e5750505050505090565b90919293949584806103ac600193605f198682030187528a51610197565b980193019301919493929061037e565b6103c536610168565b906103d76103d2836107ea565b6107bf565b82815291601f196103e7826107ea565b0160005b81811061046c57505060005b81811061040d5760405180610294864383610353565b806104666000806104216001958789610818565b8161043961042e8361083f565b926020810190610849565b919061044a6040518094819361087c565b03925af161045661088a565b61046084896108c6565b526108da565b016103f7565b8060606020809388010152016103eb565b346101325760003660031901126101325760206040516000194301408152f35b34610132576000366003190112610132576020604051468152f35b90604060031983011261013257600435801515810361013257916024359067ffffffffffffffff82116101325761019391600401610137565b61025893926060928252602082015281604082015201906101d7565b61029461052261051c366104b8565b91610989565b604051918291434043846104f1565b34610132576000366003190112610132576020604051488152f35b34610132576000366003190112610132576020604051438152f35b73ffffffffffffffffffffffffffffffffffffffff81160361013257565b346101325760203660031901126101325760206004356105a481610567565b31604051908152f35b34610132576000366003190112610132576020604051448152f35b6105d136610168565b6105da81610925565b9060005b8181106105f357604051806102948582610247565b6105fd81846108c6565b51610609828487610a1f565b6000806106158361083f565b6106278260406102d581880188610849565b03925af19161063461088a565b90610649602094859384840152829015159052565b51910135171561065c57506001016105de565b62461bcd60e51b60005260045260176024527f4d756c746963616c6c333a2063616c6c206661696c656400000000000000000060445260646000fd5b34610132576000366003190112610132576020604051458152f35b34610132576000366003190112610132576020604051418152f35b6102946106dd61051c366104b8565b6040519182916020835260208301906101d7565b6106fa36610168565b61070381610925565b9160005b82811061072057604051806102948643804090846104f1565b80610785610730600193876108c6565b5161073c838787610818565b600080823561074a81610567565b8161075a60209586810190610849565b9190826040519384928337810182815203925af19061077761088a565b9083015215158091526108da565b01610707565b34610132576020366003190112610132576020604051600435408152f35b634e487b7160e01b600052604160045260246000fd5b6040519190601f01601f1916820167ffffffffffffffff8111838210176107e557604052565b6107a9565b67ffffffffffffffff81116107e55760051b60200190565b634e487b7160e01b600052603260045260246000fd5b919081101561083a5760051b81013590603e1981360301821215610132570190565b610802565b3561025881610567565b903590601e1981360301821215610132570180359067ffffffffffffffff82116101325760200191813603831361013257565b908092918237016000815290565b3d156108c1573d9067ffffffffffffffff82116107e5576108b4601f8301601f19166020016107bf565b9182523d6000602084013e565b606090565b805182101561083a5760209160051b010190565b156108e157565b606460405162461bcd60e51b815260206004820152601760248201527f4d756c746963616c6c333a2063616c6c206661696c65640000000000000000006044820152fd5b906109326103d2836107ea565b8281528092610943601f19916107ea565b016000805b8281106109555750505050565b604090815182810181811067ffffffffffffffff8211176107e5576020935283815282606081830152828701015201610948565b92919061099582610925565b9360005b8381106109a65750505050565b806109b3600192886108c6565b51836109c0838888610818565b60008082356109ce81610567565b816109de60209586810190610849565b9190826040519384928337810182815203925af1906109fb61088a565b908401521515809252610a10575b5001610999565b610a19906108da565b38610a09565b919081101561083a5760051b81013590605e1981360301821215610132570190565b919081101561083a5760051b81013590607e1981360301821215610132570190565b15610a6a57565b606460405162461bcd60e51b815260206004820152601a60248201527f4d756c746963616c6c333a2076616c7565206d69736d617463680000000000006044820152fdfea264697066735822122023e61129dafcd7072cd6fe8b1b27e078bde5e92621dc837eee83936625b6536a64736f6c63430008130033";

type Multicall3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Multicall3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
